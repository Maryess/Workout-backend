
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Workout
 * 
 */
export type Workout = $Result.DefaultSelection<Prisma.$WorkoutPayload>
/**
 * Model Exercise
 * 
 */
export type Exercise = $Result.DefaultSelection<Prisma.$ExercisePayload>
/**
 * Model logExercise
 * 
 */
export type logExercise = $Result.DefaultSelection<Prisma.$logExercisePayload>
/**
 * Model logWorkout
 * 
 */
export type logWorkout = $Result.DefaultSelection<Prisma.$logWorkoutPayload>
/**
 * Model ExerciseTime
 * 
 */
export type ExerciseTime = $Result.DefaultSelection<Prisma.$ExerciseTimePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.workout`: Exposes CRUD operations for the **Workout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workouts
    * const workouts = await prisma.workout.findMany()
    * ```
    */
  get workout(): Prisma.WorkoutDelegate<ExtArgs>;

  /**
   * `prisma.exercise`: Exposes CRUD operations for the **Exercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercises
    * const exercises = await prisma.exercise.findMany()
    * ```
    */
  get exercise(): Prisma.ExerciseDelegate<ExtArgs>;

  /**
   * `prisma.logExercise`: Exposes CRUD operations for the **logExercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LogExercises
    * const logExercises = await prisma.logExercise.findMany()
    * ```
    */
  get logExercise(): Prisma.logExerciseDelegate<ExtArgs>;

  /**
   * `prisma.logWorkout`: Exposes CRUD operations for the **logWorkout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LogWorkouts
    * const logWorkouts = await prisma.logWorkout.findMany()
    * ```
    */
  get logWorkout(): Prisma.logWorkoutDelegate<ExtArgs>;

  /**
   * `prisma.exerciseTime`: Exposes CRUD operations for the **ExerciseTime** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExerciseTimes
    * const exerciseTimes = await prisma.exerciseTime.findMany()
    * ```
    */
  get exerciseTime(): Prisma.ExerciseTimeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.1
   * Query Engine version: efd2449663b3d73d637ea1fd226bafbcf45b3102
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Workout: 'Workout',
    Exercise: 'Exercise',
    logExercise: 'logExercise',
    logWorkout: 'logWorkout',
    ExerciseTime: 'ExerciseTime'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'workout' | 'exercise' | 'logExercise' | 'logWorkout' | 'exerciseTime'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Workout: {
        payload: Prisma.$WorkoutPayload<ExtArgs>
        fields: Prisma.WorkoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          findFirst: {
            args: Prisma.WorkoutFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          findMany: {
            args: Prisma.WorkoutFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>[]
          }
          create: {
            args: Prisma.WorkoutCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          createMany: {
            args: Prisma.WorkoutCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WorkoutDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          update: {
            args: Prisma.WorkoutUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WorkoutUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          aggregate: {
            args: Prisma.WorkoutAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWorkout>
          }
          groupBy: {
            args: Prisma.WorkoutGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WorkoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutCountArgs<ExtArgs>,
            result: $Utils.Optional<WorkoutCountAggregateOutputType> | number
          }
        }
      }
      Exercise: {
        payload: Prisma.$ExercisePayload<ExtArgs>
        fields: Prisma.ExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findFirst: {
            args: Prisma.ExerciseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findMany: {
            args: Prisma.ExerciseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          create: {
            args: Prisma.ExerciseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          createMany: {
            args: Prisma.ExerciseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExerciseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          update: {
            args: Prisma.ExerciseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          deleteMany: {
            args: Prisma.ExerciseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExerciseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          aggregate: {
            args: Prisma.ExerciseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExercise>
          }
          groupBy: {
            args: Prisma.ExerciseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseCountArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseCountAggregateOutputType> | number
          }
        }
      }
      logExercise: {
        payload: Prisma.$logExercisePayload<ExtArgs>
        fields: Prisma.logExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.logExerciseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.logExerciseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logExercisePayload>
          }
          findFirst: {
            args: Prisma.logExerciseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.logExerciseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logExercisePayload>
          }
          findMany: {
            args: Prisma.logExerciseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logExercisePayload>[]
          }
          create: {
            args: Prisma.logExerciseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logExercisePayload>
          }
          createMany: {
            args: Prisma.logExerciseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.logExerciseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logExercisePayload>
          }
          update: {
            args: Prisma.logExerciseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logExercisePayload>
          }
          deleteMany: {
            args: Prisma.logExerciseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.logExerciseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.logExerciseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logExercisePayload>
          }
          aggregate: {
            args: Prisma.LogExerciseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLogExercise>
          }
          groupBy: {
            args: Prisma.logExerciseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LogExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.logExerciseCountArgs<ExtArgs>,
            result: $Utils.Optional<LogExerciseCountAggregateOutputType> | number
          }
        }
      }
      logWorkout: {
        payload: Prisma.$logWorkoutPayload<ExtArgs>
        fields: Prisma.logWorkoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.logWorkoutFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logWorkoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.logWorkoutFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logWorkoutPayload>
          }
          findFirst: {
            args: Prisma.logWorkoutFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logWorkoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.logWorkoutFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logWorkoutPayload>
          }
          findMany: {
            args: Prisma.logWorkoutFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logWorkoutPayload>[]
          }
          create: {
            args: Prisma.logWorkoutCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logWorkoutPayload>
          }
          createMany: {
            args: Prisma.logWorkoutCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.logWorkoutDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logWorkoutPayload>
          }
          update: {
            args: Prisma.logWorkoutUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logWorkoutPayload>
          }
          deleteMany: {
            args: Prisma.logWorkoutDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.logWorkoutUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.logWorkoutUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logWorkoutPayload>
          }
          aggregate: {
            args: Prisma.LogWorkoutAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLogWorkout>
          }
          groupBy: {
            args: Prisma.logWorkoutGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LogWorkoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.logWorkoutCountArgs<ExtArgs>,
            result: $Utils.Optional<LogWorkoutCountAggregateOutputType> | number
          }
        }
      }
      ExerciseTime: {
        payload: Prisma.$ExerciseTimePayload<ExtArgs>
        fields: Prisma.ExerciseTimeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseTimeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseTimePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseTimeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseTimePayload>
          }
          findFirst: {
            args: Prisma.ExerciseTimeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseTimePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseTimeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseTimePayload>
          }
          findMany: {
            args: Prisma.ExerciseTimeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseTimePayload>[]
          }
          create: {
            args: Prisma.ExerciseTimeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseTimePayload>
          }
          createMany: {
            args: Prisma.ExerciseTimeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExerciseTimeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseTimePayload>
          }
          update: {
            args: Prisma.ExerciseTimeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseTimePayload>
          }
          deleteMany: {
            args: Prisma.ExerciseTimeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseTimeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExerciseTimeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseTimePayload>
          }
          aggregate: {
            args: Prisma.ExerciseTimeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExerciseTime>
          }
          groupBy: {
            args: Prisma.ExerciseTimeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseTimeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseTimeCountArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseTimeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    logExercise: number
    logWorkout: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logExercise?: boolean | UserCountOutputTypeCountLogExerciseArgs
    logWorkout?: boolean | UserCountOutputTypeCountLogWorkoutArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLogExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: logExerciseWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLogWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: logWorkoutWhereInput
  }



  /**
   * Count Type WorkoutCountOutputType
   */

  export type WorkoutCountOutputType = {
    exercises: number
    logWorkout: number
  }

  export type WorkoutCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | WorkoutCountOutputTypeCountExercisesArgs
    logWorkout?: boolean | WorkoutCountOutputTypeCountLogWorkoutArgs
  }

  // Custom InputTypes

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutCountOutputType
     */
    select?: WorkoutCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }


  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountLogWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: logWorkoutWhereInput
  }



  /**
   * Count Type ExerciseCountOutputType
   */

  export type ExerciseCountOutputType = {
    workout: number
  }

  export type ExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout?: boolean | ExerciseCountOutputTypeCountWorkoutArgs
  }

  // Custom InputTypes

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCountOutputType
     */
    select?: ExerciseCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutWhereInput
  }



  /**
   * Count Type LogExerciseCountOutputType
   */

  export type LogExerciseCountOutputType = {
    times: number
    exercise: number
  }

  export type LogExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    times?: boolean | LogExerciseCountOutputTypeCountTimesArgs
    exercise?: boolean | LogExerciseCountOutputTypeCountExerciseArgs
  }

  // Custom InputTypes

  /**
   * LogExerciseCountOutputType without action
   */
  export type LogExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogExerciseCountOutputType
     */
    select?: LogExerciseCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * LogExerciseCountOutputType without action
   */
  export type LogExerciseCountOutputTypeCountTimesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseTimeWhereInput
  }


  /**
   * LogExerciseCountOutputType without action
   */
  export type LogExerciseCountOutputTypeCountExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }



  /**
   * Count Type LogWorkoutCountOutputType
   */

  export type LogWorkoutCountOutputType = {
    logExercises: number
  }

  export type LogWorkoutCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logExercises?: boolean | LogWorkoutCountOutputTypeCountLogExercisesArgs
  }

  // Custom InputTypes

  /**
   * LogWorkoutCountOutputType without action
   */
  export type LogWorkoutCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogWorkoutCountOutputType
     */
    select?: LogWorkoutCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * LogWorkoutCountOutputType without action
   */
  export type LogWorkoutCountOutputTypeCountLogExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: logExerciseWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    createdAt: Date | null
    updatedt: Date | null
    name: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    createdAt: Date | null
    updatedt: Date | null
    name: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    createdAt: number
    updatedt: number
    name: number
    password: number
    image: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    createdAt?: true
    updatedt?: true
    name?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    createdAt?: true
    updatedt?: true
    name?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    createdAt?: true
    updatedt?: true
    name?: true
    password?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    createdAt: Date
    updatedt: Date
    name: string
    password: string
    image: string[]
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    createdAt?: boolean
    updatedt?: boolean
    name?: boolean
    password?: boolean
    image?: boolean
    logExercise?: boolean | User$logExerciseArgs<ExtArgs>
    logWorkout?: boolean | User$logWorkoutArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    createdAt?: boolean
    updatedt?: boolean
    name?: boolean
    password?: boolean
    image?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logExercise?: boolean | User$logExerciseArgs<ExtArgs>
    logWorkout?: boolean | User$logWorkoutArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      logExercise: Prisma.$logExercisePayload<ExtArgs>[]
      logWorkout: Prisma.$logWorkoutPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      createdAt: Date
      updatedt: Date
      name: string
      password: string
      image: string[]
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    logExercise<T extends User$logExerciseArgs<ExtArgs> = {}>(args?: Subset<T, User$logExerciseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logExercisePayload<ExtArgs>, T, 'findMany'> | Null>;

    logWorkout<T extends User$logWorkoutArgs<ExtArgs> = {}>(args?: Subset<T, User$logWorkoutArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logWorkoutPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedt: FieldRef<"User", 'DateTime'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String[]'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.logExercise
   */
  export type User$logExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logExercise
     */
    select?: logExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logExerciseInclude<ExtArgs> | null
    where?: logExerciseWhereInput
    orderBy?: logExerciseOrderByWithRelationInput | logExerciseOrderByWithRelationInput[]
    cursor?: logExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogExerciseScalarFieldEnum | LogExerciseScalarFieldEnum[]
  }


  /**
   * User.logWorkout
   */
  export type User$logWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logWorkout
     */
    select?: logWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logWorkoutInclude<ExtArgs> | null
    where?: logWorkoutWhereInput
    orderBy?: logWorkoutOrderByWithRelationInput | logWorkoutOrderByWithRelationInput[]
    cursor?: logWorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogWorkoutScalarFieldEnum | LogWorkoutScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Workout
   */

  export type AggregateWorkout = {
    _count: WorkoutCountAggregateOutputType | null
    _avg: WorkoutAvgAggregateOutputType | null
    _sum: WorkoutSumAggregateOutputType | null
    _min: WorkoutMinAggregateOutputType | null
    _max: WorkoutMaxAggregateOutputType | null
  }

  export type WorkoutAvgAggregateOutputType = {
    id: number | null
  }

  export type WorkoutSumAggregateOutputType = {
    id: number | null
  }

  export type WorkoutMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedt: Date | null
  }

  export type WorkoutMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedt: Date | null
  }

  export type WorkoutCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedt: number
    _all: number
  }


  export type WorkoutAvgAggregateInputType = {
    id?: true
  }

  export type WorkoutSumAggregateInputType = {
    id?: true
  }

  export type WorkoutMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedt?: true
  }

  export type WorkoutMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedt?: true
  }

  export type WorkoutCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedt?: true
    _all?: true
  }

  export type WorkoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workout to aggregate.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workouts
    **/
    _count?: true | WorkoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutMaxAggregateInputType
  }

  export type GetWorkoutAggregateType<T extends WorkoutAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkout[P]>
      : GetScalarType<T[P], AggregateWorkout[P]>
  }




  export type WorkoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutWhereInput
    orderBy?: WorkoutOrderByWithAggregationInput | WorkoutOrderByWithAggregationInput[]
    by: WorkoutScalarFieldEnum[] | WorkoutScalarFieldEnum
    having?: WorkoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutCountAggregateInputType | true
    _avg?: WorkoutAvgAggregateInputType
    _sum?: WorkoutSumAggregateInputType
    _min?: WorkoutMinAggregateInputType
    _max?: WorkoutMaxAggregateInputType
  }

  export type WorkoutGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedt: Date
    _count: WorkoutCountAggregateOutputType | null
    _avg: WorkoutAvgAggregateOutputType | null
    _sum: WorkoutSumAggregateOutputType | null
    _min: WorkoutMinAggregateOutputType | null
    _max: WorkoutMaxAggregateOutputType | null
  }

  type GetWorkoutGroupByPayload<T extends WorkoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedt?: boolean
    exercises?: boolean | Workout$exercisesArgs<ExtArgs>
    logWorkout?: boolean | Workout$logWorkoutArgs<ExtArgs>
    _count?: boolean | WorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout"]>

  export type WorkoutSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedt?: boolean
  }

  export type WorkoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | Workout$exercisesArgs<ExtArgs>
    logWorkout?: boolean | Workout$logWorkoutArgs<ExtArgs>
    _count?: boolean | WorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $WorkoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Workout"
    objects: {
      exercises: Prisma.$ExercisePayload<ExtArgs>[]
      logWorkout: Prisma.$logWorkoutPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedt: Date
    }, ExtArgs["result"]["workout"]>
    composites: {}
  }


  type WorkoutGetPayload<S extends boolean | null | undefined | WorkoutDefaultArgs> = $Result.GetResult<Prisma.$WorkoutPayload, S>

  type WorkoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkoutFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkoutCountAggregateInputType | true
    }

  export interface WorkoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Workout'], meta: { name: 'Workout' } }
    /**
     * Find zero or one Workout that matches the filter.
     * @param {WorkoutFindUniqueArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkoutFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutFindUniqueArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Workout that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WorkoutFindUniqueOrThrowArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WorkoutFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Workout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutFindFirstArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkoutFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutFindFirstArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Workout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutFindFirstOrThrowArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WorkoutFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Workouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workouts
     * const workouts = await prisma.workout.findMany()
     * 
     * // Get first 10 Workouts
     * const workouts = await prisma.workout.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutWithIdOnly = await prisma.workout.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkoutFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Workout.
     * @param {WorkoutCreateArgs} args - Arguments to create a Workout.
     * @example
     * // Create one Workout
     * const Workout = await prisma.workout.create({
     *   data: {
     *     // ... data to create a Workout
     *   }
     * })
     * 
    **/
    create<T extends WorkoutCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutCreateArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Workouts.
     *     @param {WorkoutCreateManyArgs} args - Arguments to create many Workouts.
     *     @example
     *     // Create many Workouts
     *     const workout = await prisma.workout.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WorkoutCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Workout.
     * @param {WorkoutDeleteArgs} args - Arguments to delete one Workout.
     * @example
     * // Delete one Workout
     * const Workout = await prisma.workout.delete({
     *   where: {
     *     // ... filter to delete one Workout
     *   }
     * })
     * 
    **/
    delete<T extends WorkoutDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutDeleteArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Workout.
     * @param {WorkoutUpdateArgs} args - Arguments to update one Workout.
     * @example
     * // Update one Workout
     * const workout = await prisma.workout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkoutUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutUpdateArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Workouts.
     * @param {WorkoutDeleteManyArgs} args - Arguments to filter Workouts to delete.
     * @example
     * // Delete a few Workouts
     * const { count } = await prisma.workout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkoutDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workouts
     * const workout = await prisma.workout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkoutUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Workout.
     * @param {WorkoutUpsertArgs} args - Arguments to update or create a Workout.
     * @example
     * // Update or create a Workout
     * const workout = await prisma.workout.upsert({
     *   create: {
     *     // ... data to create a Workout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workout we want to update
     *   }
     * })
    **/
    upsert<T extends WorkoutUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutUpsertArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutCountArgs} args - Arguments to filter Workouts to count.
     * @example
     * // Count the number of Workouts
     * const count = await prisma.workout.count({
     *   where: {
     *     // ... the filter for the Workouts we want to count
     *   }
     * })
    **/
    count<T extends WorkoutCountArgs>(
      args?: Subset<T, WorkoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutAggregateArgs>(args: Subset<T, WorkoutAggregateArgs>): Prisma.PrismaPromise<GetWorkoutAggregateType<T>>

    /**
     * Group by Workout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Workout model
   */
  readonly fields: WorkoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Workout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    exercises<T extends Workout$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, Workout$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findMany'> | Null>;

    logWorkout<T extends Workout$logWorkoutArgs<ExtArgs> = {}>(args?: Subset<T, Workout$logWorkoutArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logWorkoutPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Workout model
   */ 
  interface WorkoutFieldRefs {
    readonly id: FieldRef<"Workout", 'Int'>
    readonly name: FieldRef<"Workout", 'String'>
    readonly createdAt: FieldRef<"Workout", 'DateTime'>
    readonly updatedt: FieldRef<"Workout", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Workout findUnique
   */
  export type WorkoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where: WorkoutWhereUniqueInput
  }


  /**
   * Workout findUniqueOrThrow
   */
  export type WorkoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where: WorkoutWhereUniqueInput
  }


  /**
   * Workout findFirst
   */
  export type WorkoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workouts.
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workouts.
     */
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }


  /**
   * Workout findFirstOrThrow
   */
  export type WorkoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workouts.
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workouts.
     */
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }


  /**
   * Workout findMany
   */
  export type WorkoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workouts to fetch.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workouts.
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }


  /**
   * Workout create
   */
  export type WorkoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * The data needed to create a Workout.
     */
    data: XOR<WorkoutCreateInput, WorkoutUncheckedCreateInput>
  }


  /**
   * Workout createMany
   */
  export type WorkoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Workouts.
     */
    data: WorkoutCreateManyInput | WorkoutCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Workout update
   */
  export type WorkoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * The data needed to update a Workout.
     */
    data: XOR<WorkoutUpdateInput, WorkoutUncheckedUpdateInput>
    /**
     * Choose, which Workout to update.
     */
    where: WorkoutWhereUniqueInput
  }


  /**
   * Workout updateMany
   */
  export type WorkoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Workouts.
     */
    data: XOR<WorkoutUpdateManyMutationInput, WorkoutUncheckedUpdateManyInput>
    /**
     * Filter which Workouts to update
     */
    where?: WorkoutWhereInput
  }


  /**
   * Workout upsert
   */
  export type WorkoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * The filter to search for the Workout to update in case it exists.
     */
    where: WorkoutWhereUniqueInput
    /**
     * In case the Workout found by the `where` argument doesn't exist, create a new Workout with this data.
     */
    create: XOR<WorkoutCreateInput, WorkoutUncheckedCreateInput>
    /**
     * In case the Workout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutUpdateInput, WorkoutUncheckedUpdateInput>
  }


  /**
   * Workout delete
   */
  export type WorkoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter which Workout to delete.
     */
    where: WorkoutWhereUniqueInput
  }


  /**
   * Workout deleteMany
   */
  export type WorkoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workouts to delete
     */
    where?: WorkoutWhereInput
  }


  /**
   * Workout.exercises
   */
  export type Workout$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }


  /**
   * Workout.logWorkout
   */
  export type Workout$logWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logWorkout
     */
    select?: logWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logWorkoutInclude<ExtArgs> | null
    where?: logWorkoutWhereInput
    orderBy?: logWorkoutOrderByWithRelationInput | logWorkoutOrderByWithRelationInput[]
    cursor?: logWorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogWorkoutScalarFieldEnum | LogWorkoutScalarFieldEnum[]
  }


  /**
   * Workout without action
   */
  export type WorkoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkoutInclude<ExtArgs> | null
  }



  /**
   * Model Exercise
   */

  export type AggregateExercise = {
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  export type ExerciseAvgAggregateOutputType = {
    id: number | null
    times: number | null
    logExerciseId: number | null
  }

  export type ExerciseSumAggregateOutputType = {
    id: number | null
    times: number | null
    logExerciseId: number | null
  }

  export type ExerciseMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedt: Date | null
    name: string | null
    times: number | null
    iconPath: string | null
    logExerciseId: number | null
  }

  export type ExerciseMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedt: Date | null
    name: string | null
    times: number | null
    iconPath: string | null
    logExerciseId: number | null
  }

  export type ExerciseCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedt: number
    name: number
    times: number
    iconPath: number
    logExerciseId: number
    _all: number
  }


  export type ExerciseAvgAggregateInputType = {
    id?: true
    times?: true
    logExerciseId?: true
  }

  export type ExerciseSumAggregateInputType = {
    id?: true
    times?: true
    logExerciseId?: true
  }

  export type ExerciseMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedt?: true
    name?: true
    times?: true
    iconPath?: true
    logExerciseId?: true
  }

  export type ExerciseMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedt?: true
    name?: true
    times?: true
    iconPath?: true
    logExerciseId?: true
  }

  export type ExerciseCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedt?: true
    name?: true
    times?: true
    iconPath?: true
    logExerciseId?: true
    _all?: true
  }

  export type ExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercise to aggregate.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exercises
    **/
    _count?: true | ExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseMaxAggregateInputType
  }

  export type GetExerciseAggregateType<T extends ExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise[P]>
      : GetScalarType<T[P], AggregateExercise[P]>
  }




  export type ExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithAggregationInput | ExerciseOrderByWithAggregationInput[]
    by: ExerciseScalarFieldEnum[] | ExerciseScalarFieldEnum
    having?: ExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseCountAggregateInputType | true
    _avg?: ExerciseAvgAggregateInputType
    _sum?: ExerciseSumAggregateInputType
    _min?: ExerciseMinAggregateInputType
    _max?: ExerciseMaxAggregateInputType
  }

  export type ExerciseGroupByOutputType = {
    id: number
    createdAt: Date
    updatedt: Date
    name: string
    times: number
    iconPath: string
    logExerciseId: number | null
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  type GetExerciseGroupByPayload<T extends ExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedt?: boolean
    name?: boolean
    times?: boolean
    iconPath?: boolean
    logExerciseId?: boolean
    workout?: boolean | Exercise$workoutArgs<ExtArgs>
    logExercise?: boolean | Exercise$logExerciseArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedt?: boolean
    name?: boolean
    times?: boolean
    iconPath?: boolean
    logExerciseId?: boolean
  }

  export type ExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout?: boolean | Exercise$workoutArgs<ExtArgs>
    logExercise?: boolean | Exercise$logExerciseArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exercise"
    objects: {
      workout: Prisma.$WorkoutPayload<ExtArgs>[]
      logExercise: Prisma.$logExercisePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedt: Date
      name: string
      times: number
      iconPath: string
      logExerciseId: number | null
    }, ExtArgs["result"]["exercise"]>
    composites: {}
  }


  type ExerciseGetPayload<S extends boolean | null | undefined | ExerciseDefaultArgs> = $Result.GetResult<Prisma.$ExercisePayload, S>

  type ExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExerciseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExerciseCountAggregateInputType | true
    }

  export interface ExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exercise'], meta: { name: 'Exercise' } }
    /**
     * Find zero or one Exercise that matches the filter.
     * @param {ExerciseFindUniqueArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExerciseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseFindUniqueArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Exercise that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExerciseFindUniqueOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExerciseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Exercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExerciseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindFirstArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Exercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExerciseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercises
     * const exercises = await prisma.exercise.findMany()
     * 
     * // Get first 10 Exercises
     * const exercises = await prisma.exercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseWithIdOnly = await prisma.exercise.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExerciseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Exercise.
     * @param {ExerciseCreateArgs} args - Arguments to create a Exercise.
     * @example
     * // Create one Exercise
     * const Exercise = await prisma.exercise.create({
     *   data: {
     *     // ... data to create a Exercise
     *   }
     * })
     * 
    **/
    create<T extends ExerciseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseCreateArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Exercises.
     *     @param {ExerciseCreateManyArgs} args - Arguments to create many Exercises.
     *     @example
     *     // Create many Exercises
     *     const exercise = await prisma.exercise.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExerciseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exercise.
     * @param {ExerciseDeleteArgs} args - Arguments to delete one Exercise.
     * @example
     * // Delete one Exercise
     * const Exercise = await prisma.exercise.delete({
     *   where: {
     *     // ... filter to delete one Exercise
     *   }
     * })
     * 
    **/
    delete<T extends ExerciseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseDeleteArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Exercise.
     * @param {ExerciseUpdateArgs} args - Arguments to update one Exercise.
     * @example
     * // Update one Exercise
     * const exercise = await prisma.exercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExerciseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseUpdateArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Exercises.
     * @param {ExerciseDeleteManyArgs} args - Arguments to filter Exercises to delete.
     * @example
     * // Delete a few Exercises
     * const { count } = await prisma.exercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExerciseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExerciseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exercise.
     * @param {ExerciseUpsertArgs} args - Arguments to update or create a Exercise.
     * @example
     * // Update or create a Exercise
     * const exercise = await prisma.exercise.upsert({
     *   create: {
     *     // ... data to create a Exercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise we want to update
     *   }
     * })
    **/
    upsert<T extends ExerciseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseUpsertArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCountArgs} args - Arguments to filter Exercises to count.
     * @example
     * // Count the number of Exercises
     * const count = await prisma.exercise.count({
     *   where: {
     *     // ... the filter for the Exercises we want to count
     *   }
     * })
    **/
    count<T extends ExerciseCountArgs>(
      args?: Subset<T, ExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseAggregateArgs>(args: Subset<T, ExerciseAggregateArgs>): Prisma.PrismaPromise<GetExerciseAggregateType<T>>

    /**
     * Group by Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exercise model
   */
  readonly fields: ExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    workout<T extends Exercise$workoutArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$workoutArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findMany'> | Null>;

    logExercise<T extends Exercise$logExerciseArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$logExerciseArgs<ExtArgs>>): Prisma__logExerciseClient<$Result.GetResult<Prisma.$logExercisePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Exercise model
   */ 
  interface ExerciseFieldRefs {
    readonly id: FieldRef<"Exercise", 'Int'>
    readonly createdAt: FieldRef<"Exercise", 'DateTime'>
    readonly updatedt: FieldRef<"Exercise", 'DateTime'>
    readonly name: FieldRef<"Exercise", 'String'>
    readonly times: FieldRef<"Exercise", 'Int'>
    readonly iconPath: FieldRef<"Exercise", 'String'>
    readonly logExerciseId: FieldRef<"Exercise", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Exercise findUnique
   */
  export type ExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }


  /**
   * Exercise findUniqueOrThrow
   */
  export type ExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }


  /**
   * Exercise findFirst
   */
  export type ExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }


  /**
   * Exercise findFirstOrThrow
   */
  export type ExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }


  /**
   * Exercise findMany
   */
  export type ExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }


  /**
   * Exercise create
   */
  export type ExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a Exercise.
     */
    data: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
  }


  /**
   * Exercise createMany
   */
  export type ExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Exercise update
   */
  export type ExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a Exercise.
     */
    data: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
    /**
     * Choose, which Exercise to update.
     */
    where: ExerciseWhereUniqueInput
  }


  /**
   * Exercise updateMany
   */
  export type ExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
  }


  /**
   * Exercise upsert
   */
  export type ExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the Exercise to update in case it exists.
     */
    where: ExerciseWhereUniqueInput
    /**
     * In case the Exercise found by the `where` argument doesn't exist, create a new Exercise with this data.
     */
    create: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
    /**
     * In case the Exercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
  }


  /**
   * Exercise delete
   */
  export type ExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter which Exercise to delete.
     */
    where: ExerciseWhereUniqueInput
  }


  /**
   * Exercise deleteMany
   */
  export type ExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercises to delete
     */
    where?: ExerciseWhereInput
  }


  /**
   * Exercise.workout
   */
  export type Exercise$workoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkoutInclude<ExtArgs> | null
    where?: WorkoutWhereInput
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    cursor?: WorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }


  /**
   * Exercise.logExercise
   */
  export type Exercise$logExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logExercise
     */
    select?: logExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logExerciseInclude<ExtArgs> | null
    where?: logExerciseWhereInput
  }


  /**
   * Exercise without action
   */
  export type ExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
  }



  /**
   * Model logExercise
   */

  export type AggregateLogExercise = {
    _count: LogExerciseCountAggregateOutputType | null
    _avg: LogExerciseAvgAggregateOutputType | null
    _sum: LogExerciseSumAggregateOutputType | null
    _min: LogExerciseMinAggregateOutputType | null
    _max: LogExerciseMaxAggregateOutputType | null
  }

  export type LogExerciseAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    logWorkoutId: number | null
  }

  export type LogExerciseSumAggregateOutputType = {
    id: number | null
    userId: number | null
    logWorkoutId: number | null
  }

  export type LogExerciseMinAggregateOutputType = {
    id: number | null
    isCompleted: boolean | null
    createdAt: Date | null
    updatedt: Date | null
    userId: number | null
    logWorkoutId: number | null
  }

  export type LogExerciseMaxAggregateOutputType = {
    id: number | null
    isCompleted: boolean | null
    createdAt: Date | null
    updatedt: Date | null
    userId: number | null
    logWorkoutId: number | null
  }

  export type LogExerciseCountAggregateOutputType = {
    id: number
    isCompleted: number
    createdAt: number
    updatedt: number
    userId: number
    logWorkoutId: number
    _all: number
  }


  export type LogExerciseAvgAggregateInputType = {
    id?: true
    userId?: true
    logWorkoutId?: true
  }

  export type LogExerciseSumAggregateInputType = {
    id?: true
    userId?: true
    logWorkoutId?: true
  }

  export type LogExerciseMinAggregateInputType = {
    id?: true
    isCompleted?: true
    createdAt?: true
    updatedt?: true
    userId?: true
    logWorkoutId?: true
  }

  export type LogExerciseMaxAggregateInputType = {
    id?: true
    isCompleted?: true
    createdAt?: true
    updatedt?: true
    userId?: true
    logWorkoutId?: true
  }

  export type LogExerciseCountAggregateInputType = {
    id?: true
    isCompleted?: true
    createdAt?: true
    updatedt?: true
    userId?: true
    logWorkoutId?: true
    _all?: true
  }

  export type LogExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which logExercise to aggregate.
     */
    where?: logExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logExercises to fetch.
     */
    orderBy?: logExerciseOrderByWithRelationInput | logExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: logExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned logExercises
    **/
    _count?: true | LogExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogExerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogExerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogExerciseMaxAggregateInputType
  }

  export type GetLogExerciseAggregateType<T extends LogExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateLogExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogExercise[P]>
      : GetScalarType<T[P], AggregateLogExercise[P]>
  }




  export type logExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: logExerciseWhereInput
    orderBy?: logExerciseOrderByWithAggregationInput | logExerciseOrderByWithAggregationInput[]
    by: LogExerciseScalarFieldEnum[] | LogExerciseScalarFieldEnum
    having?: logExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogExerciseCountAggregateInputType | true
    _avg?: LogExerciseAvgAggregateInputType
    _sum?: LogExerciseSumAggregateInputType
    _min?: LogExerciseMinAggregateInputType
    _max?: LogExerciseMaxAggregateInputType
  }

  export type LogExerciseGroupByOutputType = {
    id: number
    isCompleted: boolean
    createdAt: Date
    updatedt: Date
    userId: number | null
    logWorkoutId: number | null
    _count: LogExerciseCountAggregateOutputType | null
    _avg: LogExerciseAvgAggregateOutputType | null
    _sum: LogExerciseSumAggregateOutputType | null
    _min: LogExerciseMinAggregateOutputType | null
    _max: LogExerciseMaxAggregateOutputType | null
  }

  type GetLogExerciseGroupByPayload<T extends logExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], LogExerciseGroupByOutputType[P]>
        }
      >
    >


  export type logExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedt?: boolean
    userId?: boolean
    logWorkoutId?: boolean
    times?: boolean | logExercise$timesArgs<ExtArgs>
    exercise?: boolean | logExercise$exerciseArgs<ExtArgs>
    user?: boolean | logExercise$userArgs<ExtArgs>
    logWorkout?: boolean | logExercise$logWorkoutArgs<ExtArgs>
    _count?: boolean | LogExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logExercise"]>

  export type logExerciseSelectScalar = {
    id?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedt?: boolean
    userId?: boolean
    logWorkoutId?: boolean
  }

  export type logExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    times?: boolean | logExercise$timesArgs<ExtArgs>
    exercise?: boolean | logExercise$exerciseArgs<ExtArgs>
    user?: boolean | logExercise$userArgs<ExtArgs>
    logWorkout?: boolean | logExercise$logWorkoutArgs<ExtArgs>
    _count?: boolean | LogExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $logExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "logExercise"
    objects: {
      times: Prisma.$ExerciseTimePayload<ExtArgs>[]
      exercise: Prisma.$ExercisePayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs> | null
      logWorkout: Prisma.$logWorkoutPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      isCompleted: boolean
      createdAt: Date
      updatedt: Date
      userId: number | null
      logWorkoutId: number | null
    }, ExtArgs["result"]["logExercise"]>
    composites: {}
  }


  type logExerciseGetPayload<S extends boolean | null | undefined | logExerciseDefaultArgs> = $Result.GetResult<Prisma.$logExercisePayload, S>

  type logExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<logExerciseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LogExerciseCountAggregateInputType | true
    }

  export interface logExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['logExercise'], meta: { name: 'logExercise' } }
    /**
     * Find zero or one LogExercise that matches the filter.
     * @param {logExerciseFindUniqueArgs} args - Arguments to find a LogExercise
     * @example
     * // Get one LogExercise
     * const logExercise = await prisma.logExercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends logExerciseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, logExerciseFindUniqueArgs<ExtArgs>>
    ): Prisma__logExerciseClient<$Result.GetResult<Prisma.$logExercisePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LogExercise that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {logExerciseFindUniqueOrThrowArgs} args - Arguments to find a LogExercise
     * @example
     * // Get one LogExercise
     * const logExercise = await prisma.logExercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends logExerciseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, logExerciseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__logExerciseClient<$Result.GetResult<Prisma.$logExercisePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LogExercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logExerciseFindFirstArgs} args - Arguments to find a LogExercise
     * @example
     * // Get one LogExercise
     * const logExercise = await prisma.logExercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends logExerciseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, logExerciseFindFirstArgs<ExtArgs>>
    ): Prisma__logExerciseClient<$Result.GetResult<Prisma.$logExercisePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LogExercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logExerciseFindFirstOrThrowArgs} args - Arguments to find a LogExercise
     * @example
     * // Get one LogExercise
     * const logExercise = await prisma.logExercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends logExerciseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, logExerciseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__logExerciseClient<$Result.GetResult<Prisma.$logExercisePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LogExercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logExerciseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LogExercises
     * const logExercises = await prisma.logExercise.findMany()
     * 
     * // Get first 10 LogExercises
     * const logExercises = await prisma.logExercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logExerciseWithIdOnly = await prisma.logExercise.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends logExerciseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, logExerciseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logExercisePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LogExercise.
     * @param {logExerciseCreateArgs} args - Arguments to create a LogExercise.
     * @example
     * // Create one LogExercise
     * const LogExercise = await prisma.logExercise.create({
     *   data: {
     *     // ... data to create a LogExercise
     *   }
     * })
     * 
    **/
    create<T extends logExerciseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, logExerciseCreateArgs<ExtArgs>>
    ): Prisma__logExerciseClient<$Result.GetResult<Prisma.$logExercisePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LogExercises.
     *     @param {logExerciseCreateManyArgs} args - Arguments to create many LogExercises.
     *     @example
     *     // Create many LogExercises
     *     const logExercise = await prisma.logExercise.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends logExerciseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, logExerciseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LogExercise.
     * @param {logExerciseDeleteArgs} args - Arguments to delete one LogExercise.
     * @example
     * // Delete one LogExercise
     * const LogExercise = await prisma.logExercise.delete({
     *   where: {
     *     // ... filter to delete one LogExercise
     *   }
     * })
     * 
    **/
    delete<T extends logExerciseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, logExerciseDeleteArgs<ExtArgs>>
    ): Prisma__logExerciseClient<$Result.GetResult<Prisma.$logExercisePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LogExercise.
     * @param {logExerciseUpdateArgs} args - Arguments to update one LogExercise.
     * @example
     * // Update one LogExercise
     * const logExercise = await prisma.logExercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends logExerciseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, logExerciseUpdateArgs<ExtArgs>>
    ): Prisma__logExerciseClient<$Result.GetResult<Prisma.$logExercisePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LogExercises.
     * @param {logExerciseDeleteManyArgs} args - Arguments to filter LogExercises to delete.
     * @example
     * // Delete a few LogExercises
     * const { count } = await prisma.logExercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends logExerciseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, logExerciseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LogExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LogExercises
     * const logExercise = await prisma.logExercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends logExerciseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, logExerciseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LogExercise.
     * @param {logExerciseUpsertArgs} args - Arguments to update or create a LogExercise.
     * @example
     * // Update or create a LogExercise
     * const logExercise = await prisma.logExercise.upsert({
     *   create: {
     *     // ... data to create a LogExercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LogExercise we want to update
     *   }
     * })
    **/
    upsert<T extends logExerciseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, logExerciseUpsertArgs<ExtArgs>>
    ): Prisma__logExerciseClient<$Result.GetResult<Prisma.$logExercisePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LogExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logExerciseCountArgs} args - Arguments to filter LogExercises to count.
     * @example
     * // Count the number of LogExercises
     * const count = await prisma.logExercise.count({
     *   where: {
     *     // ... the filter for the LogExercises we want to count
     *   }
     * })
    **/
    count<T extends logExerciseCountArgs>(
      args?: Subset<T, logExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LogExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogExerciseAggregateArgs>(args: Subset<T, LogExerciseAggregateArgs>): Prisma.PrismaPromise<GetLogExerciseAggregateType<T>>

    /**
     * Group by LogExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends logExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: logExerciseGroupByArgs['orderBy'] }
        : { orderBy?: logExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, logExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the logExercise model
   */
  readonly fields: logExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for logExercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__logExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    times<T extends logExercise$timesArgs<ExtArgs> = {}>(args?: Subset<T, logExercise$timesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseTimePayload<ExtArgs>, T, 'findMany'> | Null>;

    exercise<T extends logExercise$exerciseArgs<ExtArgs> = {}>(args?: Subset<T, logExercise$exerciseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findMany'> | Null>;

    user<T extends logExercise$userArgs<ExtArgs> = {}>(args?: Subset<T, logExercise$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    logWorkout<T extends logExercise$logWorkoutArgs<ExtArgs> = {}>(args?: Subset<T, logExercise$logWorkoutArgs<ExtArgs>>): Prisma__logWorkoutClient<$Result.GetResult<Prisma.$logWorkoutPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the logExercise model
   */ 
  interface logExerciseFieldRefs {
    readonly id: FieldRef<"logExercise", 'Int'>
    readonly isCompleted: FieldRef<"logExercise", 'Boolean'>
    readonly createdAt: FieldRef<"logExercise", 'DateTime'>
    readonly updatedt: FieldRef<"logExercise", 'DateTime'>
    readonly userId: FieldRef<"logExercise", 'Int'>
    readonly logWorkoutId: FieldRef<"logExercise", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * logExercise findUnique
   */
  export type logExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logExercise
     */
    select?: logExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logExerciseInclude<ExtArgs> | null
    /**
     * Filter, which logExercise to fetch.
     */
    where: logExerciseWhereUniqueInput
  }


  /**
   * logExercise findUniqueOrThrow
   */
  export type logExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logExercise
     */
    select?: logExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logExerciseInclude<ExtArgs> | null
    /**
     * Filter, which logExercise to fetch.
     */
    where: logExerciseWhereUniqueInput
  }


  /**
   * logExercise findFirst
   */
  export type logExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logExercise
     */
    select?: logExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logExerciseInclude<ExtArgs> | null
    /**
     * Filter, which logExercise to fetch.
     */
    where?: logExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logExercises to fetch.
     */
    orderBy?: logExerciseOrderByWithRelationInput | logExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for logExercises.
     */
    cursor?: logExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of logExercises.
     */
    distinct?: LogExerciseScalarFieldEnum | LogExerciseScalarFieldEnum[]
  }


  /**
   * logExercise findFirstOrThrow
   */
  export type logExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logExercise
     */
    select?: logExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logExerciseInclude<ExtArgs> | null
    /**
     * Filter, which logExercise to fetch.
     */
    where?: logExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logExercises to fetch.
     */
    orderBy?: logExerciseOrderByWithRelationInput | logExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for logExercises.
     */
    cursor?: logExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of logExercises.
     */
    distinct?: LogExerciseScalarFieldEnum | LogExerciseScalarFieldEnum[]
  }


  /**
   * logExercise findMany
   */
  export type logExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logExercise
     */
    select?: logExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logExerciseInclude<ExtArgs> | null
    /**
     * Filter, which logExercises to fetch.
     */
    where?: logExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logExercises to fetch.
     */
    orderBy?: logExerciseOrderByWithRelationInput | logExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing logExercises.
     */
    cursor?: logExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logExercises.
     */
    skip?: number
    distinct?: LogExerciseScalarFieldEnum | LogExerciseScalarFieldEnum[]
  }


  /**
   * logExercise create
   */
  export type logExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logExercise
     */
    select?: logExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a logExercise.
     */
    data?: XOR<logExerciseCreateInput, logExerciseUncheckedCreateInput>
  }


  /**
   * logExercise createMany
   */
  export type logExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many logExercises.
     */
    data: logExerciseCreateManyInput | logExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * logExercise update
   */
  export type logExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logExercise
     */
    select?: logExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a logExercise.
     */
    data: XOR<logExerciseUpdateInput, logExerciseUncheckedUpdateInput>
    /**
     * Choose, which logExercise to update.
     */
    where: logExerciseWhereUniqueInput
  }


  /**
   * logExercise updateMany
   */
  export type logExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update logExercises.
     */
    data: XOR<logExerciseUpdateManyMutationInput, logExerciseUncheckedUpdateManyInput>
    /**
     * Filter which logExercises to update
     */
    where?: logExerciseWhereInput
  }


  /**
   * logExercise upsert
   */
  export type logExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logExercise
     */
    select?: logExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the logExercise to update in case it exists.
     */
    where: logExerciseWhereUniqueInput
    /**
     * In case the logExercise found by the `where` argument doesn't exist, create a new logExercise with this data.
     */
    create: XOR<logExerciseCreateInput, logExerciseUncheckedCreateInput>
    /**
     * In case the logExercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<logExerciseUpdateInput, logExerciseUncheckedUpdateInput>
  }


  /**
   * logExercise delete
   */
  export type logExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logExercise
     */
    select?: logExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logExerciseInclude<ExtArgs> | null
    /**
     * Filter which logExercise to delete.
     */
    where: logExerciseWhereUniqueInput
  }


  /**
   * logExercise deleteMany
   */
  export type logExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which logExercises to delete
     */
    where?: logExerciseWhereInput
  }


  /**
   * logExercise.times
   */
  export type logExercise$timesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTime
     */
    select?: ExerciseTimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseTimeInclude<ExtArgs> | null
    where?: ExerciseTimeWhereInput
    orderBy?: ExerciseTimeOrderByWithRelationInput | ExerciseTimeOrderByWithRelationInput[]
    cursor?: ExerciseTimeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseTimeScalarFieldEnum | ExerciseTimeScalarFieldEnum[]
  }


  /**
   * logExercise.exercise
   */
  export type logExercise$exerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }


  /**
   * logExercise.user
   */
  export type logExercise$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * logExercise.logWorkout
   */
  export type logExercise$logWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logWorkout
     */
    select?: logWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logWorkoutInclude<ExtArgs> | null
    where?: logWorkoutWhereInput
  }


  /**
   * logExercise without action
   */
  export type logExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logExercise
     */
    select?: logExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logExerciseInclude<ExtArgs> | null
  }



  /**
   * Model logWorkout
   */

  export type AggregateLogWorkout = {
    _count: LogWorkoutCountAggregateOutputType | null
    _avg: LogWorkoutAvgAggregateOutputType | null
    _sum: LogWorkoutSumAggregateOutputType | null
    _min: LogWorkoutMinAggregateOutputType | null
    _max: LogWorkoutMaxAggregateOutputType | null
  }

  export type LogWorkoutAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    workoutId: number | null
  }

  export type LogWorkoutSumAggregateOutputType = {
    id: number | null
    userId: number | null
    workoutId: number | null
  }

  export type LogWorkoutMinAggregateOutputType = {
    id: number | null
    isCompleted: boolean | null
    createdAt: Date | null
    updatedt: Date | null
    userId: number | null
    workoutId: number | null
  }

  export type LogWorkoutMaxAggregateOutputType = {
    id: number | null
    isCompleted: boolean | null
    createdAt: Date | null
    updatedt: Date | null
    userId: number | null
    workoutId: number | null
  }

  export type LogWorkoutCountAggregateOutputType = {
    id: number
    isCompleted: number
    createdAt: number
    updatedt: number
    userId: number
    workoutId: number
    _all: number
  }


  export type LogWorkoutAvgAggregateInputType = {
    id?: true
    userId?: true
    workoutId?: true
  }

  export type LogWorkoutSumAggregateInputType = {
    id?: true
    userId?: true
    workoutId?: true
  }

  export type LogWorkoutMinAggregateInputType = {
    id?: true
    isCompleted?: true
    createdAt?: true
    updatedt?: true
    userId?: true
    workoutId?: true
  }

  export type LogWorkoutMaxAggregateInputType = {
    id?: true
    isCompleted?: true
    createdAt?: true
    updatedt?: true
    userId?: true
    workoutId?: true
  }

  export type LogWorkoutCountAggregateInputType = {
    id?: true
    isCompleted?: true
    createdAt?: true
    updatedt?: true
    userId?: true
    workoutId?: true
    _all?: true
  }

  export type LogWorkoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which logWorkout to aggregate.
     */
    where?: logWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logWorkouts to fetch.
     */
    orderBy?: logWorkoutOrderByWithRelationInput | logWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: logWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned logWorkouts
    **/
    _count?: true | LogWorkoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogWorkoutAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogWorkoutSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogWorkoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogWorkoutMaxAggregateInputType
  }

  export type GetLogWorkoutAggregateType<T extends LogWorkoutAggregateArgs> = {
        [P in keyof T & keyof AggregateLogWorkout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogWorkout[P]>
      : GetScalarType<T[P], AggregateLogWorkout[P]>
  }




  export type logWorkoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: logWorkoutWhereInput
    orderBy?: logWorkoutOrderByWithAggregationInput | logWorkoutOrderByWithAggregationInput[]
    by: LogWorkoutScalarFieldEnum[] | LogWorkoutScalarFieldEnum
    having?: logWorkoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogWorkoutCountAggregateInputType | true
    _avg?: LogWorkoutAvgAggregateInputType
    _sum?: LogWorkoutSumAggregateInputType
    _min?: LogWorkoutMinAggregateInputType
    _max?: LogWorkoutMaxAggregateInputType
  }

  export type LogWorkoutGroupByOutputType = {
    id: number
    isCompleted: boolean
    createdAt: Date
    updatedt: Date
    userId: number | null
    workoutId: number | null
    _count: LogWorkoutCountAggregateOutputType | null
    _avg: LogWorkoutAvgAggregateOutputType | null
    _sum: LogWorkoutSumAggregateOutputType | null
    _min: LogWorkoutMinAggregateOutputType | null
    _max: LogWorkoutMaxAggregateOutputType | null
  }

  type GetLogWorkoutGroupByPayload<T extends logWorkoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogWorkoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogWorkoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogWorkoutGroupByOutputType[P]>
            : GetScalarType<T[P], LogWorkoutGroupByOutputType[P]>
        }
      >
    >


  export type logWorkoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedt?: boolean
    userId?: boolean
    workoutId?: boolean
    logExercises?: boolean | logWorkout$logExercisesArgs<ExtArgs>
    user?: boolean | logWorkout$userArgs<ExtArgs>
    workout?: boolean | logWorkout$workoutArgs<ExtArgs>
    _count?: boolean | LogWorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logWorkout"]>

  export type logWorkoutSelectScalar = {
    id?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedt?: boolean
    userId?: boolean
    workoutId?: boolean
  }

  export type logWorkoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logExercises?: boolean | logWorkout$logExercisesArgs<ExtArgs>
    user?: boolean | logWorkout$userArgs<ExtArgs>
    workout?: boolean | logWorkout$workoutArgs<ExtArgs>
    _count?: boolean | LogWorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $logWorkoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "logWorkout"
    objects: {
      logExercises: Prisma.$logExercisePayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs> | null
      workout: Prisma.$WorkoutPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      isCompleted: boolean
      createdAt: Date
      updatedt: Date
      userId: number | null
      workoutId: number | null
    }, ExtArgs["result"]["logWorkout"]>
    composites: {}
  }


  type logWorkoutGetPayload<S extends boolean | null | undefined | logWorkoutDefaultArgs> = $Result.GetResult<Prisma.$logWorkoutPayload, S>

  type logWorkoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<logWorkoutFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LogWorkoutCountAggregateInputType | true
    }

  export interface logWorkoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['logWorkout'], meta: { name: 'logWorkout' } }
    /**
     * Find zero or one LogWorkout that matches the filter.
     * @param {logWorkoutFindUniqueArgs} args - Arguments to find a LogWorkout
     * @example
     * // Get one LogWorkout
     * const logWorkout = await prisma.logWorkout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends logWorkoutFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, logWorkoutFindUniqueArgs<ExtArgs>>
    ): Prisma__logWorkoutClient<$Result.GetResult<Prisma.$logWorkoutPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LogWorkout that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {logWorkoutFindUniqueOrThrowArgs} args - Arguments to find a LogWorkout
     * @example
     * // Get one LogWorkout
     * const logWorkout = await prisma.logWorkout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends logWorkoutFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, logWorkoutFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__logWorkoutClient<$Result.GetResult<Prisma.$logWorkoutPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LogWorkout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logWorkoutFindFirstArgs} args - Arguments to find a LogWorkout
     * @example
     * // Get one LogWorkout
     * const logWorkout = await prisma.logWorkout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends logWorkoutFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, logWorkoutFindFirstArgs<ExtArgs>>
    ): Prisma__logWorkoutClient<$Result.GetResult<Prisma.$logWorkoutPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LogWorkout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logWorkoutFindFirstOrThrowArgs} args - Arguments to find a LogWorkout
     * @example
     * // Get one LogWorkout
     * const logWorkout = await prisma.logWorkout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends logWorkoutFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, logWorkoutFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__logWorkoutClient<$Result.GetResult<Prisma.$logWorkoutPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LogWorkouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logWorkoutFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LogWorkouts
     * const logWorkouts = await prisma.logWorkout.findMany()
     * 
     * // Get first 10 LogWorkouts
     * const logWorkouts = await prisma.logWorkout.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logWorkoutWithIdOnly = await prisma.logWorkout.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends logWorkoutFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, logWorkoutFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logWorkoutPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LogWorkout.
     * @param {logWorkoutCreateArgs} args - Arguments to create a LogWorkout.
     * @example
     * // Create one LogWorkout
     * const LogWorkout = await prisma.logWorkout.create({
     *   data: {
     *     // ... data to create a LogWorkout
     *   }
     * })
     * 
    **/
    create<T extends logWorkoutCreateArgs<ExtArgs>>(
      args: SelectSubset<T, logWorkoutCreateArgs<ExtArgs>>
    ): Prisma__logWorkoutClient<$Result.GetResult<Prisma.$logWorkoutPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LogWorkouts.
     *     @param {logWorkoutCreateManyArgs} args - Arguments to create many LogWorkouts.
     *     @example
     *     // Create many LogWorkouts
     *     const logWorkout = await prisma.logWorkout.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends logWorkoutCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, logWorkoutCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LogWorkout.
     * @param {logWorkoutDeleteArgs} args - Arguments to delete one LogWorkout.
     * @example
     * // Delete one LogWorkout
     * const LogWorkout = await prisma.logWorkout.delete({
     *   where: {
     *     // ... filter to delete one LogWorkout
     *   }
     * })
     * 
    **/
    delete<T extends logWorkoutDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, logWorkoutDeleteArgs<ExtArgs>>
    ): Prisma__logWorkoutClient<$Result.GetResult<Prisma.$logWorkoutPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LogWorkout.
     * @param {logWorkoutUpdateArgs} args - Arguments to update one LogWorkout.
     * @example
     * // Update one LogWorkout
     * const logWorkout = await prisma.logWorkout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends logWorkoutUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, logWorkoutUpdateArgs<ExtArgs>>
    ): Prisma__logWorkoutClient<$Result.GetResult<Prisma.$logWorkoutPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LogWorkouts.
     * @param {logWorkoutDeleteManyArgs} args - Arguments to filter LogWorkouts to delete.
     * @example
     * // Delete a few LogWorkouts
     * const { count } = await prisma.logWorkout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends logWorkoutDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, logWorkoutDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LogWorkouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logWorkoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LogWorkouts
     * const logWorkout = await prisma.logWorkout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends logWorkoutUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, logWorkoutUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LogWorkout.
     * @param {logWorkoutUpsertArgs} args - Arguments to update or create a LogWorkout.
     * @example
     * // Update or create a LogWorkout
     * const logWorkout = await prisma.logWorkout.upsert({
     *   create: {
     *     // ... data to create a LogWorkout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LogWorkout we want to update
     *   }
     * })
    **/
    upsert<T extends logWorkoutUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, logWorkoutUpsertArgs<ExtArgs>>
    ): Prisma__logWorkoutClient<$Result.GetResult<Prisma.$logWorkoutPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LogWorkouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logWorkoutCountArgs} args - Arguments to filter LogWorkouts to count.
     * @example
     * // Count the number of LogWorkouts
     * const count = await prisma.logWorkout.count({
     *   where: {
     *     // ... the filter for the LogWorkouts we want to count
     *   }
     * })
    **/
    count<T extends logWorkoutCountArgs>(
      args?: Subset<T, logWorkoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogWorkoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LogWorkout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogWorkoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogWorkoutAggregateArgs>(args: Subset<T, LogWorkoutAggregateArgs>): Prisma.PrismaPromise<GetLogWorkoutAggregateType<T>>

    /**
     * Group by LogWorkout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logWorkoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends logWorkoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: logWorkoutGroupByArgs['orderBy'] }
        : { orderBy?: logWorkoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, logWorkoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogWorkoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the logWorkout model
   */
  readonly fields: logWorkoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for logWorkout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__logWorkoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    logExercises<T extends logWorkout$logExercisesArgs<ExtArgs> = {}>(args?: Subset<T, logWorkout$logExercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logExercisePayload<ExtArgs>, T, 'findMany'> | Null>;

    user<T extends logWorkout$userArgs<ExtArgs> = {}>(args?: Subset<T, logWorkout$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    workout<T extends logWorkout$workoutArgs<ExtArgs> = {}>(args?: Subset<T, logWorkout$workoutArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the logWorkout model
   */ 
  interface logWorkoutFieldRefs {
    readonly id: FieldRef<"logWorkout", 'Int'>
    readonly isCompleted: FieldRef<"logWorkout", 'Boolean'>
    readonly createdAt: FieldRef<"logWorkout", 'DateTime'>
    readonly updatedt: FieldRef<"logWorkout", 'DateTime'>
    readonly userId: FieldRef<"logWorkout", 'Int'>
    readonly workoutId: FieldRef<"logWorkout", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * logWorkout findUnique
   */
  export type logWorkoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logWorkout
     */
    select?: logWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which logWorkout to fetch.
     */
    where: logWorkoutWhereUniqueInput
  }


  /**
   * logWorkout findUniqueOrThrow
   */
  export type logWorkoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logWorkout
     */
    select?: logWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which logWorkout to fetch.
     */
    where: logWorkoutWhereUniqueInput
  }


  /**
   * logWorkout findFirst
   */
  export type logWorkoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logWorkout
     */
    select?: logWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which logWorkout to fetch.
     */
    where?: logWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logWorkouts to fetch.
     */
    orderBy?: logWorkoutOrderByWithRelationInput | logWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for logWorkouts.
     */
    cursor?: logWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of logWorkouts.
     */
    distinct?: LogWorkoutScalarFieldEnum | LogWorkoutScalarFieldEnum[]
  }


  /**
   * logWorkout findFirstOrThrow
   */
  export type logWorkoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logWorkout
     */
    select?: logWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which logWorkout to fetch.
     */
    where?: logWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logWorkouts to fetch.
     */
    orderBy?: logWorkoutOrderByWithRelationInput | logWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for logWorkouts.
     */
    cursor?: logWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of logWorkouts.
     */
    distinct?: LogWorkoutScalarFieldEnum | LogWorkoutScalarFieldEnum[]
  }


  /**
   * logWorkout findMany
   */
  export type logWorkoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logWorkout
     */
    select?: logWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which logWorkouts to fetch.
     */
    where?: logWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logWorkouts to fetch.
     */
    orderBy?: logWorkoutOrderByWithRelationInput | logWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing logWorkouts.
     */
    cursor?: logWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logWorkouts.
     */
    skip?: number
    distinct?: LogWorkoutScalarFieldEnum | LogWorkoutScalarFieldEnum[]
  }


  /**
   * logWorkout create
   */
  export type logWorkoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logWorkout
     */
    select?: logWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logWorkoutInclude<ExtArgs> | null
    /**
     * The data needed to create a logWorkout.
     */
    data?: XOR<logWorkoutCreateInput, logWorkoutUncheckedCreateInput>
  }


  /**
   * logWorkout createMany
   */
  export type logWorkoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many logWorkouts.
     */
    data: logWorkoutCreateManyInput | logWorkoutCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * logWorkout update
   */
  export type logWorkoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logWorkout
     */
    select?: logWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logWorkoutInclude<ExtArgs> | null
    /**
     * The data needed to update a logWorkout.
     */
    data: XOR<logWorkoutUpdateInput, logWorkoutUncheckedUpdateInput>
    /**
     * Choose, which logWorkout to update.
     */
    where: logWorkoutWhereUniqueInput
  }


  /**
   * logWorkout updateMany
   */
  export type logWorkoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update logWorkouts.
     */
    data: XOR<logWorkoutUpdateManyMutationInput, logWorkoutUncheckedUpdateManyInput>
    /**
     * Filter which logWorkouts to update
     */
    where?: logWorkoutWhereInput
  }


  /**
   * logWorkout upsert
   */
  export type logWorkoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logWorkout
     */
    select?: logWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logWorkoutInclude<ExtArgs> | null
    /**
     * The filter to search for the logWorkout to update in case it exists.
     */
    where: logWorkoutWhereUniqueInput
    /**
     * In case the logWorkout found by the `where` argument doesn't exist, create a new logWorkout with this data.
     */
    create: XOR<logWorkoutCreateInput, logWorkoutUncheckedCreateInput>
    /**
     * In case the logWorkout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<logWorkoutUpdateInput, logWorkoutUncheckedUpdateInput>
  }


  /**
   * logWorkout delete
   */
  export type logWorkoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logWorkout
     */
    select?: logWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logWorkoutInclude<ExtArgs> | null
    /**
     * Filter which logWorkout to delete.
     */
    where: logWorkoutWhereUniqueInput
  }


  /**
   * logWorkout deleteMany
   */
  export type logWorkoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which logWorkouts to delete
     */
    where?: logWorkoutWhereInput
  }


  /**
   * logWorkout.logExercises
   */
  export type logWorkout$logExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logExercise
     */
    select?: logExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logExerciseInclude<ExtArgs> | null
    where?: logExerciseWhereInput
    orderBy?: logExerciseOrderByWithRelationInput | logExerciseOrderByWithRelationInput[]
    cursor?: logExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogExerciseScalarFieldEnum | LogExerciseScalarFieldEnum[]
  }


  /**
   * logWorkout.user
   */
  export type logWorkout$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * logWorkout.workout
   */
  export type logWorkout$workoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkoutInclude<ExtArgs> | null
    where?: WorkoutWhereInput
  }


  /**
   * logWorkout without action
   */
  export type logWorkoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logWorkout
     */
    select?: logWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logWorkoutInclude<ExtArgs> | null
  }



  /**
   * Model ExerciseTime
   */

  export type AggregateExerciseTime = {
    _count: ExerciseTimeCountAggregateOutputType | null
    _avg: ExerciseTimeAvgAggregateOutputType | null
    _sum: ExerciseTimeSumAggregateOutputType | null
    _min: ExerciseTimeMinAggregateOutputType | null
    _max: ExerciseTimeMaxAggregateOutputType | null
  }

  export type ExerciseTimeAvgAggregateOutputType = {
    id: number | null
    repeat: number | null
    weight: number | null
    logExerciseId: number | null
  }

  export type ExerciseTimeSumAggregateOutputType = {
    id: number | null
    repeat: number | null
    weight: number | null
    logExerciseId: number | null
  }

  export type ExerciseTimeMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedt: Date | null
    isCompleted: boolean | null
    repeat: number | null
    weight: number | null
    logExerciseId: number | null
  }

  export type ExerciseTimeMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedt: Date | null
    isCompleted: boolean | null
    repeat: number | null
    weight: number | null
    logExerciseId: number | null
  }

  export type ExerciseTimeCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedt: number
    isCompleted: number
    repeat: number
    weight: number
    logExerciseId: number
    _all: number
  }


  export type ExerciseTimeAvgAggregateInputType = {
    id?: true
    repeat?: true
    weight?: true
    logExerciseId?: true
  }

  export type ExerciseTimeSumAggregateInputType = {
    id?: true
    repeat?: true
    weight?: true
    logExerciseId?: true
  }

  export type ExerciseTimeMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedt?: true
    isCompleted?: true
    repeat?: true
    weight?: true
    logExerciseId?: true
  }

  export type ExerciseTimeMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedt?: true
    isCompleted?: true
    repeat?: true
    weight?: true
    logExerciseId?: true
  }

  export type ExerciseTimeCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedt?: true
    isCompleted?: true
    repeat?: true
    weight?: true
    logExerciseId?: true
    _all?: true
  }

  export type ExerciseTimeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExerciseTime to aggregate.
     */
    where?: ExerciseTimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseTimes to fetch.
     */
    orderBy?: ExerciseTimeOrderByWithRelationInput | ExerciseTimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseTimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseTimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseTimes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExerciseTimes
    **/
    _count?: true | ExerciseTimeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExerciseTimeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExerciseTimeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseTimeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseTimeMaxAggregateInputType
  }

  export type GetExerciseTimeAggregateType<T extends ExerciseTimeAggregateArgs> = {
        [P in keyof T & keyof AggregateExerciseTime]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExerciseTime[P]>
      : GetScalarType<T[P], AggregateExerciseTime[P]>
  }




  export type ExerciseTimeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseTimeWhereInput
    orderBy?: ExerciseTimeOrderByWithAggregationInput | ExerciseTimeOrderByWithAggregationInput[]
    by: ExerciseTimeScalarFieldEnum[] | ExerciseTimeScalarFieldEnum
    having?: ExerciseTimeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseTimeCountAggregateInputType | true
    _avg?: ExerciseTimeAvgAggregateInputType
    _sum?: ExerciseTimeSumAggregateInputType
    _min?: ExerciseTimeMinAggregateInputType
    _max?: ExerciseTimeMaxAggregateInputType
  }

  export type ExerciseTimeGroupByOutputType = {
    id: number
    createdAt: Date
    updatedt: Date
    isCompleted: boolean
    repeat: number
    weight: number
    logExerciseId: number | null
    _count: ExerciseTimeCountAggregateOutputType | null
    _avg: ExerciseTimeAvgAggregateOutputType | null
    _sum: ExerciseTimeSumAggregateOutputType | null
    _min: ExerciseTimeMinAggregateOutputType | null
    _max: ExerciseTimeMaxAggregateOutputType | null
  }

  type GetExerciseTimeGroupByPayload<T extends ExerciseTimeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseTimeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseTimeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseTimeGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseTimeGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseTimeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedt?: boolean
    isCompleted?: boolean
    repeat?: boolean
    weight?: boolean
    logExerciseId?: boolean
    logExercise?: boolean | ExerciseTime$logExerciseArgs<ExtArgs>
  }, ExtArgs["result"]["exerciseTime"]>

  export type ExerciseTimeSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedt?: boolean
    isCompleted?: boolean
    repeat?: boolean
    weight?: boolean
    logExerciseId?: boolean
  }

  export type ExerciseTimeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logExercise?: boolean | ExerciseTime$logExerciseArgs<ExtArgs>
  }


  export type $ExerciseTimePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExerciseTime"
    objects: {
      logExercise: Prisma.$logExercisePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedt: Date
      isCompleted: boolean
      repeat: number
      weight: number
      logExerciseId: number | null
    }, ExtArgs["result"]["exerciseTime"]>
    composites: {}
  }


  type ExerciseTimeGetPayload<S extends boolean | null | undefined | ExerciseTimeDefaultArgs> = $Result.GetResult<Prisma.$ExerciseTimePayload, S>

  type ExerciseTimeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExerciseTimeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExerciseTimeCountAggregateInputType | true
    }

  export interface ExerciseTimeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExerciseTime'], meta: { name: 'ExerciseTime' } }
    /**
     * Find zero or one ExerciseTime that matches the filter.
     * @param {ExerciseTimeFindUniqueArgs} args - Arguments to find a ExerciseTime
     * @example
     * // Get one ExerciseTime
     * const exerciseTime = await prisma.exerciseTime.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExerciseTimeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseTimeFindUniqueArgs<ExtArgs>>
    ): Prisma__ExerciseTimeClient<$Result.GetResult<Prisma.$ExerciseTimePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ExerciseTime that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExerciseTimeFindUniqueOrThrowArgs} args - Arguments to find a ExerciseTime
     * @example
     * // Get one ExerciseTime
     * const exerciseTime = await prisma.exerciseTime.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExerciseTimeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseTimeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseTimeClient<$Result.GetResult<Prisma.$ExerciseTimePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ExerciseTime that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseTimeFindFirstArgs} args - Arguments to find a ExerciseTime
     * @example
     * // Get one ExerciseTime
     * const exerciseTime = await prisma.exerciseTime.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExerciseTimeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseTimeFindFirstArgs<ExtArgs>>
    ): Prisma__ExerciseTimeClient<$Result.GetResult<Prisma.$ExerciseTimePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ExerciseTime that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseTimeFindFirstOrThrowArgs} args - Arguments to find a ExerciseTime
     * @example
     * // Get one ExerciseTime
     * const exerciseTime = await prisma.exerciseTime.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExerciseTimeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseTimeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseTimeClient<$Result.GetResult<Prisma.$ExerciseTimePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ExerciseTimes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseTimeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExerciseTimes
     * const exerciseTimes = await prisma.exerciseTime.findMany()
     * 
     * // Get first 10 ExerciseTimes
     * const exerciseTimes = await prisma.exerciseTime.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseTimeWithIdOnly = await prisma.exerciseTime.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExerciseTimeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseTimeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseTimePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ExerciseTime.
     * @param {ExerciseTimeCreateArgs} args - Arguments to create a ExerciseTime.
     * @example
     * // Create one ExerciseTime
     * const ExerciseTime = await prisma.exerciseTime.create({
     *   data: {
     *     // ... data to create a ExerciseTime
     *   }
     * })
     * 
    **/
    create<T extends ExerciseTimeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseTimeCreateArgs<ExtArgs>>
    ): Prisma__ExerciseTimeClient<$Result.GetResult<Prisma.$ExerciseTimePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ExerciseTimes.
     *     @param {ExerciseTimeCreateManyArgs} args - Arguments to create many ExerciseTimes.
     *     @example
     *     // Create many ExerciseTimes
     *     const exerciseTime = await prisma.exerciseTime.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExerciseTimeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseTimeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ExerciseTime.
     * @param {ExerciseTimeDeleteArgs} args - Arguments to delete one ExerciseTime.
     * @example
     * // Delete one ExerciseTime
     * const ExerciseTime = await prisma.exerciseTime.delete({
     *   where: {
     *     // ... filter to delete one ExerciseTime
     *   }
     * })
     * 
    **/
    delete<T extends ExerciseTimeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseTimeDeleteArgs<ExtArgs>>
    ): Prisma__ExerciseTimeClient<$Result.GetResult<Prisma.$ExerciseTimePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ExerciseTime.
     * @param {ExerciseTimeUpdateArgs} args - Arguments to update one ExerciseTime.
     * @example
     * // Update one ExerciseTime
     * const exerciseTime = await prisma.exerciseTime.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExerciseTimeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseTimeUpdateArgs<ExtArgs>>
    ): Prisma__ExerciseTimeClient<$Result.GetResult<Prisma.$ExerciseTimePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ExerciseTimes.
     * @param {ExerciseTimeDeleteManyArgs} args - Arguments to filter ExerciseTimes to delete.
     * @example
     * // Delete a few ExerciseTimes
     * const { count } = await prisma.exerciseTime.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExerciseTimeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseTimeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExerciseTimes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseTimeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExerciseTimes
     * const exerciseTime = await prisma.exerciseTime.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExerciseTimeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseTimeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExerciseTime.
     * @param {ExerciseTimeUpsertArgs} args - Arguments to update or create a ExerciseTime.
     * @example
     * // Update or create a ExerciseTime
     * const exerciseTime = await prisma.exerciseTime.upsert({
     *   create: {
     *     // ... data to create a ExerciseTime
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExerciseTime we want to update
     *   }
     * })
    **/
    upsert<T extends ExerciseTimeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseTimeUpsertArgs<ExtArgs>>
    ): Prisma__ExerciseTimeClient<$Result.GetResult<Prisma.$ExerciseTimePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ExerciseTimes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseTimeCountArgs} args - Arguments to filter ExerciseTimes to count.
     * @example
     * // Count the number of ExerciseTimes
     * const count = await prisma.exerciseTime.count({
     *   where: {
     *     // ... the filter for the ExerciseTimes we want to count
     *   }
     * })
    **/
    count<T extends ExerciseTimeCountArgs>(
      args?: Subset<T, ExerciseTimeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseTimeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExerciseTime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseTimeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseTimeAggregateArgs>(args: Subset<T, ExerciseTimeAggregateArgs>): Prisma.PrismaPromise<GetExerciseTimeAggregateType<T>>

    /**
     * Group by ExerciseTime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseTimeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseTimeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseTimeGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseTimeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseTimeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseTimeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExerciseTime model
   */
  readonly fields: ExerciseTimeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExerciseTime.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseTimeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    logExercise<T extends ExerciseTime$logExerciseArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseTime$logExerciseArgs<ExtArgs>>): Prisma__logExerciseClient<$Result.GetResult<Prisma.$logExercisePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ExerciseTime model
   */ 
  interface ExerciseTimeFieldRefs {
    readonly id: FieldRef<"ExerciseTime", 'Int'>
    readonly createdAt: FieldRef<"ExerciseTime", 'DateTime'>
    readonly updatedt: FieldRef<"ExerciseTime", 'DateTime'>
    readonly isCompleted: FieldRef<"ExerciseTime", 'Boolean'>
    readonly repeat: FieldRef<"ExerciseTime", 'Int'>
    readonly weight: FieldRef<"ExerciseTime", 'Int'>
    readonly logExerciseId: FieldRef<"ExerciseTime", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * ExerciseTime findUnique
   */
  export type ExerciseTimeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTime
     */
    select?: ExerciseTimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseTimeInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseTime to fetch.
     */
    where: ExerciseTimeWhereUniqueInput
  }


  /**
   * ExerciseTime findUniqueOrThrow
   */
  export type ExerciseTimeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTime
     */
    select?: ExerciseTimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseTimeInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseTime to fetch.
     */
    where: ExerciseTimeWhereUniqueInput
  }


  /**
   * ExerciseTime findFirst
   */
  export type ExerciseTimeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTime
     */
    select?: ExerciseTimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseTimeInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseTime to fetch.
     */
    where?: ExerciseTimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseTimes to fetch.
     */
    orderBy?: ExerciseTimeOrderByWithRelationInput | ExerciseTimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExerciseTimes.
     */
    cursor?: ExerciseTimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseTimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseTimes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExerciseTimes.
     */
    distinct?: ExerciseTimeScalarFieldEnum | ExerciseTimeScalarFieldEnum[]
  }


  /**
   * ExerciseTime findFirstOrThrow
   */
  export type ExerciseTimeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTime
     */
    select?: ExerciseTimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseTimeInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseTime to fetch.
     */
    where?: ExerciseTimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseTimes to fetch.
     */
    orderBy?: ExerciseTimeOrderByWithRelationInput | ExerciseTimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExerciseTimes.
     */
    cursor?: ExerciseTimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseTimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseTimes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExerciseTimes.
     */
    distinct?: ExerciseTimeScalarFieldEnum | ExerciseTimeScalarFieldEnum[]
  }


  /**
   * ExerciseTime findMany
   */
  export type ExerciseTimeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTime
     */
    select?: ExerciseTimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseTimeInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseTimes to fetch.
     */
    where?: ExerciseTimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseTimes to fetch.
     */
    orderBy?: ExerciseTimeOrderByWithRelationInput | ExerciseTimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExerciseTimes.
     */
    cursor?: ExerciseTimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseTimes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseTimes.
     */
    skip?: number
    distinct?: ExerciseTimeScalarFieldEnum | ExerciseTimeScalarFieldEnum[]
  }


  /**
   * ExerciseTime create
   */
  export type ExerciseTimeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTime
     */
    select?: ExerciseTimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseTimeInclude<ExtArgs> | null
    /**
     * The data needed to create a ExerciseTime.
     */
    data?: XOR<ExerciseTimeCreateInput, ExerciseTimeUncheckedCreateInput>
  }


  /**
   * ExerciseTime createMany
   */
  export type ExerciseTimeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExerciseTimes.
     */
    data: ExerciseTimeCreateManyInput | ExerciseTimeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ExerciseTime update
   */
  export type ExerciseTimeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTime
     */
    select?: ExerciseTimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseTimeInclude<ExtArgs> | null
    /**
     * The data needed to update a ExerciseTime.
     */
    data: XOR<ExerciseTimeUpdateInput, ExerciseTimeUncheckedUpdateInput>
    /**
     * Choose, which ExerciseTime to update.
     */
    where: ExerciseTimeWhereUniqueInput
  }


  /**
   * ExerciseTime updateMany
   */
  export type ExerciseTimeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExerciseTimes.
     */
    data: XOR<ExerciseTimeUpdateManyMutationInput, ExerciseTimeUncheckedUpdateManyInput>
    /**
     * Filter which ExerciseTimes to update
     */
    where?: ExerciseTimeWhereInput
  }


  /**
   * ExerciseTime upsert
   */
  export type ExerciseTimeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTime
     */
    select?: ExerciseTimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseTimeInclude<ExtArgs> | null
    /**
     * The filter to search for the ExerciseTime to update in case it exists.
     */
    where: ExerciseTimeWhereUniqueInput
    /**
     * In case the ExerciseTime found by the `where` argument doesn't exist, create a new ExerciseTime with this data.
     */
    create: XOR<ExerciseTimeCreateInput, ExerciseTimeUncheckedCreateInput>
    /**
     * In case the ExerciseTime was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseTimeUpdateInput, ExerciseTimeUncheckedUpdateInput>
  }


  /**
   * ExerciseTime delete
   */
  export type ExerciseTimeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTime
     */
    select?: ExerciseTimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseTimeInclude<ExtArgs> | null
    /**
     * Filter which ExerciseTime to delete.
     */
    where: ExerciseTimeWhereUniqueInput
  }


  /**
   * ExerciseTime deleteMany
   */
  export type ExerciseTimeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExerciseTimes to delete
     */
    where?: ExerciseTimeWhereInput
  }


  /**
   * ExerciseTime.logExercise
   */
  export type ExerciseTime$logExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logExercise
     */
    select?: logExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logExerciseInclude<ExtArgs> | null
    where?: logExerciseWhereInput
  }


  /**
   * ExerciseTime without action
   */
  export type ExerciseTimeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseTime
     */
    select?: ExerciseTimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseTimeInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    createdAt: 'createdAt',
    updatedt: 'updatedt',
    name: 'name',
    password: 'password',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WorkoutScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedt: 'updatedt'
  };

  export type WorkoutScalarFieldEnum = (typeof WorkoutScalarFieldEnum)[keyof typeof WorkoutScalarFieldEnum]


  export const ExerciseScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedt: 'updatedt',
    name: 'name',
    times: 'times',
    iconPath: 'iconPath',
    logExerciseId: 'logExerciseId'
  };

  export type ExerciseScalarFieldEnum = (typeof ExerciseScalarFieldEnum)[keyof typeof ExerciseScalarFieldEnum]


  export const LogExerciseScalarFieldEnum: {
    id: 'id',
    isCompleted: 'isCompleted',
    createdAt: 'createdAt',
    updatedt: 'updatedt',
    userId: 'userId',
    logWorkoutId: 'logWorkoutId'
  };

  export type LogExerciseScalarFieldEnum = (typeof LogExerciseScalarFieldEnum)[keyof typeof LogExerciseScalarFieldEnum]


  export const LogWorkoutScalarFieldEnum: {
    id: 'id',
    isCompleted: 'isCompleted',
    createdAt: 'createdAt',
    updatedt: 'updatedt',
    userId: 'userId',
    workoutId: 'workoutId'
  };

  export type LogWorkoutScalarFieldEnum = (typeof LogWorkoutScalarFieldEnum)[keyof typeof LogWorkoutScalarFieldEnum]


  export const ExerciseTimeScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedt: 'updatedt',
    isCompleted: 'isCompleted',
    repeat: 'repeat',
    weight: 'weight',
    logExerciseId: 'logExerciseId'
  };

  export type ExerciseTimeScalarFieldEnum = (typeof ExerciseTimeScalarFieldEnum)[keyof typeof ExerciseTimeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedt?: DateTimeFilter<"User"> | Date | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    image?: StringNullableListFilter<"User">
    logExercise?: LogExerciseListRelationFilter
    logWorkout?: LogWorkoutListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    name?: SortOrder
    password?: SortOrder
    image?: SortOrder
    logExercise?: logExerciseOrderByRelationAggregateInput
    logWorkout?: logWorkoutOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedt?: DateTimeFilter<"User"> | Date | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    image?: StringNullableListFilter<"User">
    logExercise?: LogExerciseListRelationFilter
    logWorkout?: LogWorkoutListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    name?: SortOrder
    password?: SortOrder
    image?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    image?: StringNullableListFilter<"User">
  }

  export type WorkoutWhereInput = {
    AND?: WorkoutWhereInput | WorkoutWhereInput[]
    OR?: WorkoutWhereInput[]
    NOT?: WorkoutWhereInput | WorkoutWhereInput[]
    id?: IntFilter<"Workout"> | number
    name?: StringFilter<"Workout"> | string
    createdAt?: DateTimeFilter<"Workout"> | Date | string
    updatedt?: DateTimeFilter<"Workout"> | Date | string
    exercises?: ExerciseListRelationFilter
    logWorkout?: LogWorkoutListRelationFilter
  }

  export type WorkoutOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    exercises?: ExerciseOrderByRelationAggregateInput
    logWorkout?: logWorkoutOrderByRelationAggregateInput
  }

  export type WorkoutWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkoutWhereInput | WorkoutWhereInput[]
    OR?: WorkoutWhereInput[]
    NOT?: WorkoutWhereInput | WorkoutWhereInput[]
    name?: StringFilter<"Workout"> | string
    createdAt?: DateTimeFilter<"Workout"> | Date | string
    updatedt?: DateTimeFilter<"Workout"> | Date | string
    exercises?: ExerciseListRelationFilter
    logWorkout?: LogWorkoutListRelationFilter
  }, "id">

  export type WorkoutOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    _count?: WorkoutCountOrderByAggregateInput
    _avg?: WorkoutAvgOrderByAggregateInput
    _max?: WorkoutMaxOrderByAggregateInput
    _min?: WorkoutMinOrderByAggregateInput
    _sum?: WorkoutSumOrderByAggregateInput
  }

  export type WorkoutScalarWhereWithAggregatesInput = {
    AND?: WorkoutScalarWhereWithAggregatesInput | WorkoutScalarWhereWithAggregatesInput[]
    OR?: WorkoutScalarWhereWithAggregatesInput[]
    NOT?: WorkoutScalarWhereWithAggregatesInput | WorkoutScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Workout"> | number
    name?: StringWithAggregatesFilter<"Workout"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Workout"> | Date | string
    updatedt?: DateTimeWithAggregatesFilter<"Workout"> | Date | string
  }

  export type ExerciseWhereInput = {
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    id?: IntFilter<"Exercise"> | number
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedt?: DateTimeFilter<"Exercise"> | Date | string
    name?: StringFilter<"Exercise"> | string
    times?: IntFilter<"Exercise"> | number
    iconPath?: StringFilter<"Exercise"> | string
    logExerciseId?: IntNullableFilter<"Exercise"> | number | null
    workout?: WorkoutListRelationFilter
    logExercise?: XOR<LogExerciseNullableRelationFilter, logExerciseWhereInput> | null
  }

  export type ExerciseOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    name?: SortOrder
    times?: SortOrder
    iconPath?: SortOrder
    logExerciseId?: SortOrderInput | SortOrder
    workout?: WorkoutOrderByRelationAggregateInput
    logExercise?: logExerciseOrderByWithRelationInput
  }

  export type ExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedt?: DateTimeFilter<"Exercise"> | Date | string
    name?: StringFilter<"Exercise"> | string
    times?: IntFilter<"Exercise"> | number
    iconPath?: StringFilter<"Exercise"> | string
    logExerciseId?: IntNullableFilter<"Exercise"> | number | null
    workout?: WorkoutListRelationFilter
    logExercise?: XOR<LogExerciseNullableRelationFilter, logExerciseWhereInput> | null
  }, "id">

  export type ExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    name?: SortOrder
    times?: SortOrder
    iconPath?: SortOrder
    logExerciseId?: SortOrderInput | SortOrder
    _count?: ExerciseCountOrderByAggregateInput
    _avg?: ExerciseAvgOrderByAggregateInput
    _max?: ExerciseMaxOrderByAggregateInput
    _min?: ExerciseMinOrderByAggregateInput
    _sum?: ExerciseSumOrderByAggregateInput
  }

  export type ExerciseScalarWhereWithAggregatesInput = {
    AND?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    OR?: ExerciseScalarWhereWithAggregatesInput[]
    NOT?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Exercise"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Exercise"> | Date | string
    updatedt?: DateTimeWithAggregatesFilter<"Exercise"> | Date | string
    name?: StringWithAggregatesFilter<"Exercise"> | string
    times?: IntWithAggregatesFilter<"Exercise"> | number
    iconPath?: StringWithAggregatesFilter<"Exercise"> | string
    logExerciseId?: IntNullableWithAggregatesFilter<"Exercise"> | number | null
  }

  export type logExerciseWhereInput = {
    AND?: logExerciseWhereInput | logExerciseWhereInput[]
    OR?: logExerciseWhereInput[]
    NOT?: logExerciseWhereInput | logExerciseWhereInput[]
    id?: IntFilter<"logExercise"> | number
    isCompleted?: BoolFilter<"logExercise"> | boolean
    createdAt?: DateTimeFilter<"logExercise"> | Date | string
    updatedt?: DateTimeFilter<"logExercise"> | Date | string
    userId?: IntNullableFilter<"logExercise"> | number | null
    logWorkoutId?: IntNullableFilter<"logExercise"> | number | null
    times?: ExerciseTimeListRelationFilter
    exercise?: ExerciseListRelationFilter
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    logWorkout?: XOR<LogWorkoutNullableRelationFilter, logWorkoutWhereInput> | null
  }

  export type logExerciseOrderByWithRelationInput = {
    id?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    userId?: SortOrderInput | SortOrder
    logWorkoutId?: SortOrderInput | SortOrder
    times?: ExerciseTimeOrderByRelationAggregateInput
    exercise?: ExerciseOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    logWorkout?: logWorkoutOrderByWithRelationInput
  }

  export type logExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: logExerciseWhereInput | logExerciseWhereInput[]
    OR?: logExerciseWhereInput[]
    NOT?: logExerciseWhereInput | logExerciseWhereInput[]
    isCompleted?: BoolFilter<"logExercise"> | boolean
    createdAt?: DateTimeFilter<"logExercise"> | Date | string
    updatedt?: DateTimeFilter<"logExercise"> | Date | string
    userId?: IntNullableFilter<"logExercise"> | number | null
    logWorkoutId?: IntNullableFilter<"logExercise"> | number | null
    times?: ExerciseTimeListRelationFilter
    exercise?: ExerciseListRelationFilter
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    logWorkout?: XOR<LogWorkoutNullableRelationFilter, logWorkoutWhereInput> | null
  }, "id">

  export type logExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    userId?: SortOrderInput | SortOrder
    logWorkoutId?: SortOrderInput | SortOrder
    _count?: logExerciseCountOrderByAggregateInput
    _avg?: logExerciseAvgOrderByAggregateInput
    _max?: logExerciseMaxOrderByAggregateInput
    _min?: logExerciseMinOrderByAggregateInput
    _sum?: logExerciseSumOrderByAggregateInput
  }

  export type logExerciseScalarWhereWithAggregatesInput = {
    AND?: logExerciseScalarWhereWithAggregatesInput | logExerciseScalarWhereWithAggregatesInput[]
    OR?: logExerciseScalarWhereWithAggregatesInput[]
    NOT?: logExerciseScalarWhereWithAggregatesInput | logExerciseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"logExercise"> | number
    isCompleted?: BoolWithAggregatesFilter<"logExercise"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"logExercise"> | Date | string
    updatedt?: DateTimeWithAggregatesFilter<"logExercise"> | Date | string
    userId?: IntNullableWithAggregatesFilter<"logExercise"> | number | null
    logWorkoutId?: IntNullableWithAggregatesFilter<"logExercise"> | number | null
  }

  export type logWorkoutWhereInput = {
    AND?: logWorkoutWhereInput | logWorkoutWhereInput[]
    OR?: logWorkoutWhereInput[]
    NOT?: logWorkoutWhereInput | logWorkoutWhereInput[]
    id?: IntFilter<"logWorkout"> | number
    isCompleted?: BoolFilter<"logWorkout"> | boolean
    createdAt?: DateTimeFilter<"logWorkout"> | Date | string
    updatedt?: DateTimeFilter<"logWorkout"> | Date | string
    userId?: IntNullableFilter<"logWorkout"> | number | null
    workoutId?: IntNullableFilter<"logWorkout"> | number | null
    logExercises?: LogExerciseListRelationFilter
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    workout?: XOR<WorkoutNullableRelationFilter, WorkoutWhereInput> | null
  }

  export type logWorkoutOrderByWithRelationInput = {
    id?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    userId?: SortOrderInput | SortOrder
    workoutId?: SortOrderInput | SortOrder
    logExercises?: logExerciseOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    workout?: WorkoutOrderByWithRelationInput
  }

  export type logWorkoutWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: logWorkoutWhereInput | logWorkoutWhereInput[]
    OR?: logWorkoutWhereInput[]
    NOT?: logWorkoutWhereInput | logWorkoutWhereInput[]
    isCompleted?: BoolFilter<"logWorkout"> | boolean
    createdAt?: DateTimeFilter<"logWorkout"> | Date | string
    updatedt?: DateTimeFilter<"logWorkout"> | Date | string
    userId?: IntNullableFilter<"logWorkout"> | number | null
    workoutId?: IntNullableFilter<"logWorkout"> | number | null
    logExercises?: LogExerciseListRelationFilter
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    workout?: XOR<WorkoutNullableRelationFilter, WorkoutWhereInput> | null
  }, "id">

  export type logWorkoutOrderByWithAggregationInput = {
    id?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    userId?: SortOrderInput | SortOrder
    workoutId?: SortOrderInput | SortOrder
    _count?: logWorkoutCountOrderByAggregateInput
    _avg?: logWorkoutAvgOrderByAggregateInput
    _max?: logWorkoutMaxOrderByAggregateInput
    _min?: logWorkoutMinOrderByAggregateInput
    _sum?: logWorkoutSumOrderByAggregateInput
  }

  export type logWorkoutScalarWhereWithAggregatesInput = {
    AND?: logWorkoutScalarWhereWithAggregatesInput | logWorkoutScalarWhereWithAggregatesInput[]
    OR?: logWorkoutScalarWhereWithAggregatesInput[]
    NOT?: logWorkoutScalarWhereWithAggregatesInput | logWorkoutScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"logWorkout"> | number
    isCompleted?: BoolWithAggregatesFilter<"logWorkout"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"logWorkout"> | Date | string
    updatedt?: DateTimeWithAggregatesFilter<"logWorkout"> | Date | string
    userId?: IntNullableWithAggregatesFilter<"logWorkout"> | number | null
    workoutId?: IntNullableWithAggregatesFilter<"logWorkout"> | number | null
  }

  export type ExerciseTimeWhereInput = {
    AND?: ExerciseTimeWhereInput | ExerciseTimeWhereInput[]
    OR?: ExerciseTimeWhereInput[]
    NOT?: ExerciseTimeWhereInput | ExerciseTimeWhereInput[]
    id?: IntFilter<"ExerciseTime"> | number
    createdAt?: DateTimeFilter<"ExerciseTime"> | Date | string
    updatedt?: DateTimeFilter<"ExerciseTime"> | Date | string
    isCompleted?: BoolFilter<"ExerciseTime"> | boolean
    repeat?: IntFilter<"ExerciseTime"> | number
    weight?: IntFilter<"ExerciseTime"> | number
    logExerciseId?: IntNullableFilter<"ExerciseTime"> | number | null
    logExercise?: XOR<LogExerciseNullableRelationFilter, logExerciseWhereInput> | null
  }

  export type ExerciseTimeOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    isCompleted?: SortOrder
    repeat?: SortOrder
    weight?: SortOrder
    logExerciseId?: SortOrderInput | SortOrder
    logExercise?: logExerciseOrderByWithRelationInput
  }

  export type ExerciseTimeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExerciseTimeWhereInput | ExerciseTimeWhereInput[]
    OR?: ExerciseTimeWhereInput[]
    NOT?: ExerciseTimeWhereInput | ExerciseTimeWhereInput[]
    createdAt?: DateTimeFilter<"ExerciseTime"> | Date | string
    updatedt?: DateTimeFilter<"ExerciseTime"> | Date | string
    isCompleted?: BoolFilter<"ExerciseTime"> | boolean
    repeat?: IntFilter<"ExerciseTime"> | number
    weight?: IntFilter<"ExerciseTime"> | number
    logExerciseId?: IntNullableFilter<"ExerciseTime"> | number | null
    logExercise?: XOR<LogExerciseNullableRelationFilter, logExerciseWhereInput> | null
  }, "id">

  export type ExerciseTimeOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    isCompleted?: SortOrder
    repeat?: SortOrder
    weight?: SortOrder
    logExerciseId?: SortOrderInput | SortOrder
    _count?: ExerciseTimeCountOrderByAggregateInput
    _avg?: ExerciseTimeAvgOrderByAggregateInput
    _max?: ExerciseTimeMaxOrderByAggregateInput
    _min?: ExerciseTimeMinOrderByAggregateInput
    _sum?: ExerciseTimeSumOrderByAggregateInput
  }

  export type ExerciseTimeScalarWhereWithAggregatesInput = {
    AND?: ExerciseTimeScalarWhereWithAggregatesInput | ExerciseTimeScalarWhereWithAggregatesInput[]
    OR?: ExerciseTimeScalarWhereWithAggregatesInput[]
    NOT?: ExerciseTimeScalarWhereWithAggregatesInput | ExerciseTimeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ExerciseTime"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ExerciseTime"> | Date | string
    updatedt?: DateTimeWithAggregatesFilter<"ExerciseTime"> | Date | string
    isCompleted?: BoolWithAggregatesFilter<"ExerciseTime"> | boolean
    repeat?: IntWithAggregatesFilter<"ExerciseTime"> | number
    weight?: IntWithAggregatesFilter<"ExerciseTime"> | number
    logExerciseId?: IntNullableWithAggregatesFilter<"ExerciseTime"> | number | null
  }

  export type UserCreateInput = {
    email: string
    createdAt?: Date | string
    updatedt?: Date | string
    name: string
    password: string
    image?: UserCreateimageInput | string[]
    logExercise?: logExerciseCreateNestedManyWithoutUserInput
    logWorkout?: logWorkoutCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedt?: Date | string
    name: string
    password: string
    image?: UserCreateimageInput | string[]
    logExercise?: logExerciseUncheckedCreateNestedManyWithoutUserInput
    logWorkout?: logWorkoutUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: UserUpdateimageInput | string[]
    logExercise?: logExerciseUpdateManyWithoutUserNestedInput
    logWorkout?: logWorkoutUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: UserUpdateimageInput | string[]
    logExercise?: logExerciseUncheckedUpdateManyWithoutUserNestedInput
    logWorkout?: logWorkoutUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedt?: Date | string
    name: string
    password: string
    image?: UserCreateimageInput | string[]
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: UserUpdateimageInput | string[]
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: UserUpdateimageInput | string[]
  }

  export type WorkoutCreateInput = {
    name: string
    createdAt?: Date | string
    updatedt?: Date | string
    exercises?: ExerciseCreateNestedManyWithoutWorkoutInput
    logWorkout?: logWorkoutCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedt?: Date | string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutWorkoutInput
    logWorkout?: logWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUpdateManyWithoutWorkoutNestedInput
    logWorkout?: logWorkoutUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    logWorkout?: logWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedt?: Date | string
  }

  export type WorkoutUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseCreateInput = {
    createdAt?: Date | string
    updatedt?: Date | string
    name: string
    times: number
    iconPath: string
    workout?: WorkoutCreateNestedManyWithoutExercisesInput
    logExercise?: logExerciseCreateNestedOneWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedt?: Date | string
    name: string
    times: number
    iconPath: string
    logExerciseId?: number | null
    workout?: WorkoutUncheckedCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    times?: IntFieldUpdateOperationsInput | number
    iconPath?: StringFieldUpdateOperationsInput | string
    workout?: WorkoutUpdateManyWithoutExercisesNestedInput
    logExercise?: logExerciseUpdateOneWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    times?: IntFieldUpdateOperationsInput | number
    iconPath?: StringFieldUpdateOperationsInput | string
    logExerciseId?: NullableIntFieldUpdateOperationsInput | number | null
    workout?: WorkoutUncheckedUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedt?: Date | string
    name: string
    times: number
    iconPath: string
    logExerciseId?: number | null
  }

  export type ExerciseUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    times?: IntFieldUpdateOperationsInput | number
    iconPath?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    times?: IntFieldUpdateOperationsInput | number
    iconPath?: StringFieldUpdateOperationsInput | string
    logExerciseId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type logExerciseCreateInput = {
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    times?: ExerciseTimeCreateNestedManyWithoutLogExerciseInput
    exercise?: ExerciseCreateNestedManyWithoutLogExerciseInput
    user?: UserCreateNestedOneWithoutLogExerciseInput
    logWorkout?: logWorkoutCreateNestedOneWithoutLogExercisesInput
  }

  export type logExerciseUncheckedCreateInput = {
    id?: number
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    userId?: number | null
    logWorkoutId?: number | null
    times?: ExerciseTimeUncheckedCreateNestedManyWithoutLogExerciseInput
    exercise?: ExerciseUncheckedCreateNestedManyWithoutLogExerciseInput
  }

  export type logExerciseUpdateInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    times?: ExerciseTimeUpdateManyWithoutLogExerciseNestedInput
    exercise?: ExerciseUpdateManyWithoutLogExerciseNestedInput
    user?: UserUpdateOneWithoutLogExerciseNestedInput
    logWorkout?: logWorkoutUpdateOneWithoutLogExercisesNestedInput
  }

  export type logExerciseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    logWorkoutId?: NullableIntFieldUpdateOperationsInput | number | null
    times?: ExerciseTimeUncheckedUpdateManyWithoutLogExerciseNestedInput
    exercise?: ExerciseUncheckedUpdateManyWithoutLogExerciseNestedInput
  }

  export type logExerciseCreateManyInput = {
    id?: number
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    userId?: number | null
    logWorkoutId?: number | null
  }

  export type logExerciseUpdateManyMutationInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type logExerciseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    logWorkoutId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type logWorkoutCreateInput = {
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    logExercises?: logExerciseCreateNestedManyWithoutLogWorkoutInput
    user?: UserCreateNestedOneWithoutLogWorkoutInput
    workout?: WorkoutCreateNestedOneWithoutLogWorkoutInput
  }

  export type logWorkoutUncheckedCreateInput = {
    id?: number
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    userId?: number | null
    workoutId?: number | null
    logExercises?: logExerciseUncheckedCreateNestedManyWithoutLogWorkoutInput
  }

  export type logWorkoutUpdateInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    logExercises?: logExerciseUpdateManyWithoutLogWorkoutNestedInput
    user?: UserUpdateOneWithoutLogWorkoutNestedInput
    workout?: WorkoutUpdateOneWithoutLogWorkoutNestedInput
  }

  export type logWorkoutUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    workoutId?: NullableIntFieldUpdateOperationsInput | number | null
    logExercises?: logExerciseUncheckedUpdateManyWithoutLogWorkoutNestedInput
  }

  export type logWorkoutCreateManyInput = {
    id?: number
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    userId?: number | null
    workoutId?: number | null
  }

  export type logWorkoutUpdateManyMutationInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type logWorkoutUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    workoutId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExerciseTimeCreateInput = {
    createdAt?: Date | string
    updatedt?: Date | string
    isCompleted?: boolean
    repeat?: number
    weight?: number
    logExercise?: logExerciseCreateNestedOneWithoutTimesInput
  }

  export type ExerciseTimeUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedt?: Date | string
    isCompleted?: boolean
    repeat?: number
    weight?: number
    logExerciseId?: number | null
  }

  export type ExerciseTimeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    repeat?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    logExercise?: logExerciseUpdateOneWithoutTimesNestedInput
  }

  export type ExerciseTimeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    repeat?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    logExerciseId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExerciseTimeCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedt?: Date | string
    isCompleted?: boolean
    repeat?: number
    weight?: number
    logExerciseId?: number | null
  }

  export type ExerciseTimeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    repeat?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
  }

  export type ExerciseTimeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    repeat?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    logExerciseId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type LogExerciseListRelationFilter = {
    every?: logExerciseWhereInput
    some?: logExerciseWhereInput
    none?: logExerciseWhereInput
  }

  export type LogWorkoutListRelationFilter = {
    every?: logWorkoutWhereInput
    some?: logWorkoutWhereInput
    none?: logWorkoutWhereInput
  }

  export type logExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type logWorkoutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    name?: SortOrder
    password?: SortOrder
    image?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    name?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    name?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ExerciseListRelationFilter = {
    every?: ExerciseWhereInput
    some?: ExerciseWhereInput
    none?: ExerciseWhereInput
  }

  export type ExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
  }

  export type WorkoutAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WorkoutMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
  }

  export type WorkoutMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
  }

  export type WorkoutSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type WorkoutListRelationFilter = {
    every?: WorkoutWhereInput
    some?: WorkoutWhereInput
    none?: WorkoutWhereInput
  }

  export type LogExerciseNullableRelationFilter = {
    is?: logExerciseWhereInput | null
    isNot?: logExerciseWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type WorkoutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    name?: SortOrder
    times?: SortOrder
    iconPath?: SortOrder
    logExerciseId?: SortOrder
  }

  export type ExerciseAvgOrderByAggregateInput = {
    id?: SortOrder
    times?: SortOrder
    logExerciseId?: SortOrder
  }

  export type ExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    name?: SortOrder
    times?: SortOrder
    iconPath?: SortOrder
    logExerciseId?: SortOrder
  }

  export type ExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    name?: SortOrder
    times?: SortOrder
    iconPath?: SortOrder
    logExerciseId?: SortOrder
  }

  export type ExerciseSumOrderByAggregateInput = {
    id?: SortOrder
    times?: SortOrder
    logExerciseId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ExerciseTimeListRelationFilter = {
    every?: ExerciseTimeWhereInput
    some?: ExerciseTimeWhereInput
    none?: ExerciseTimeWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type LogWorkoutNullableRelationFilter = {
    is?: logWorkoutWhereInput | null
    isNot?: logWorkoutWhereInput | null
  }

  export type ExerciseTimeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type logExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    userId?: SortOrder
    logWorkoutId?: SortOrder
  }

  export type logExerciseAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    logWorkoutId?: SortOrder
  }

  export type logExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    userId?: SortOrder
    logWorkoutId?: SortOrder
  }

  export type logExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    userId?: SortOrder
    logWorkoutId?: SortOrder
  }

  export type logExerciseSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    logWorkoutId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type WorkoutNullableRelationFilter = {
    is?: WorkoutWhereInput | null
    isNot?: WorkoutWhereInput | null
  }

  export type logWorkoutCountOrderByAggregateInput = {
    id?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    userId?: SortOrder
    workoutId?: SortOrder
  }

  export type logWorkoutAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutId?: SortOrder
  }

  export type logWorkoutMaxOrderByAggregateInput = {
    id?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    userId?: SortOrder
    workoutId?: SortOrder
  }

  export type logWorkoutMinOrderByAggregateInput = {
    id?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    userId?: SortOrder
    workoutId?: SortOrder
  }

  export type logWorkoutSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutId?: SortOrder
  }

  export type ExerciseTimeCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    isCompleted?: SortOrder
    repeat?: SortOrder
    weight?: SortOrder
    logExerciseId?: SortOrder
  }

  export type ExerciseTimeAvgOrderByAggregateInput = {
    id?: SortOrder
    repeat?: SortOrder
    weight?: SortOrder
    logExerciseId?: SortOrder
  }

  export type ExerciseTimeMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    isCompleted?: SortOrder
    repeat?: SortOrder
    weight?: SortOrder
    logExerciseId?: SortOrder
  }

  export type ExerciseTimeMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedt?: SortOrder
    isCompleted?: SortOrder
    repeat?: SortOrder
    weight?: SortOrder
    logExerciseId?: SortOrder
  }

  export type ExerciseTimeSumOrderByAggregateInput = {
    id?: SortOrder
    repeat?: SortOrder
    weight?: SortOrder
    logExerciseId?: SortOrder
  }

  export type UserCreateimageInput = {
    set: string[]
  }

  export type logExerciseCreateNestedManyWithoutUserInput = {
    create?: XOR<logExerciseCreateWithoutUserInput, logExerciseUncheckedCreateWithoutUserInput> | logExerciseCreateWithoutUserInput[] | logExerciseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logExerciseCreateOrConnectWithoutUserInput | logExerciseCreateOrConnectWithoutUserInput[]
    createMany?: logExerciseCreateManyUserInputEnvelope
    connect?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
  }

  export type logWorkoutCreateNestedManyWithoutUserInput = {
    create?: XOR<logWorkoutCreateWithoutUserInput, logWorkoutUncheckedCreateWithoutUserInput> | logWorkoutCreateWithoutUserInput[] | logWorkoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logWorkoutCreateOrConnectWithoutUserInput | logWorkoutCreateOrConnectWithoutUserInput[]
    createMany?: logWorkoutCreateManyUserInputEnvelope
    connect?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
  }

  export type logExerciseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<logExerciseCreateWithoutUserInput, logExerciseUncheckedCreateWithoutUserInput> | logExerciseCreateWithoutUserInput[] | logExerciseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logExerciseCreateOrConnectWithoutUserInput | logExerciseCreateOrConnectWithoutUserInput[]
    createMany?: logExerciseCreateManyUserInputEnvelope
    connect?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
  }

  export type logWorkoutUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<logWorkoutCreateWithoutUserInput, logWorkoutUncheckedCreateWithoutUserInput> | logWorkoutCreateWithoutUserInput[] | logWorkoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logWorkoutCreateOrConnectWithoutUserInput | logWorkoutCreateOrConnectWithoutUserInput[]
    createMany?: logWorkoutCreateManyUserInputEnvelope
    connect?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateimageInput = {
    set?: string[]
    push?: string | string[]
  }

  export type logExerciseUpdateManyWithoutUserNestedInput = {
    create?: XOR<logExerciseCreateWithoutUserInput, logExerciseUncheckedCreateWithoutUserInput> | logExerciseCreateWithoutUserInput[] | logExerciseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logExerciseCreateOrConnectWithoutUserInput | logExerciseCreateOrConnectWithoutUserInput[]
    upsert?: logExerciseUpsertWithWhereUniqueWithoutUserInput | logExerciseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: logExerciseCreateManyUserInputEnvelope
    set?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    disconnect?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    delete?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    connect?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    update?: logExerciseUpdateWithWhereUniqueWithoutUserInput | logExerciseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: logExerciseUpdateManyWithWhereWithoutUserInput | logExerciseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: logExerciseScalarWhereInput | logExerciseScalarWhereInput[]
  }

  export type logWorkoutUpdateManyWithoutUserNestedInput = {
    create?: XOR<logWorkoutCreateWithoutUserInput, logWorkoutUncheckedCreateWithoutUserInput> | logWorkoutCreateWithoutUserInput[] | logWorkoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logWorkoutCreateOrConnectWithoutUserInput | logWorkoutCreateOrConnectWithoutUserInput[]
    upsert?: logWorkoutUpsertWithWhereUniqueWithoutUserInput | logWorkoutUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: logWorkoutCreateManyUserInputEnvelope
    set?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    disconnect?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    delete?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    connect?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    update?: logWorkoutUpdateWithWhereUniqueWithoutUserInput | logWorkoutUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: logWorkoutUpdateManyWithWhereWithoutUserInput | logWorkoutUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: logWorkoutScalarWhereInput | logWorkoutScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type logExerciseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<logExerciseCreateWithoutUserInput, logExerciseUncheckedCreateWithoutUserInput> | logExerciseCreateWithoutUserInput[] | logExerciseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logExerciseCreateOrConnectWithoutUserInput | logExerciseCreateOrConnectWithoutUserInput[]
    upsert?: logExerciseUpsertWithWhereUniqueWithoutUserInput | logExerciseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: logExerciseCreateManyUserInputEnvelope
    set?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    disconnect?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    delete?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    connect?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    update?: logExerciseUpdateWithWhereUniqueWithoutUserInput | logExerciseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: logExerciseUpdateManyWithWhereWithoutUserInput | logExerciseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: logExerciseScalarWhereInput | logExerciseScalarWhereInput[]
  }

  export type logWorkoutUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<logWorkoutCreateWithoutUserInput, logWorkoutUncheckedCreateWithoutUserInput> | logWorkoutCreateWithoutUserInput[] | logWorkoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logWorkoutCreateOrConnectWithoutUserInput | logWorkoutCreateOrConnectWithoutUserInput[]
    upsert?: logWorkoutUpsertWithWhereUniqueWithoutUserInput | logWorkoutUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: logWorkoutCreateManyUserInputEnvelope
    set?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    disconnect?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    delete?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    connect?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    update?: logWorkoutUpdateWithWhereUniqueWithoutUserInput | logWorkoutUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: logWorkoutUpdateManyWithWhereWithoutUserInput | logWorkoutUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: logWorkoutScalarWhereInput | logWorkoutScalarWhereInput[]
  }

  export type ExerciseCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<ExerciseCreateWithoutWorkoutInput, ExerciseUncheckedCreateWithoutWorkoutInput> | ExerciseCreateWithoutWorkoutInput[] | ExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutWorkoutInput | ExerciseCreateOrConnectWithoutWorkoutInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type logWorkoutCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<logWorkoutCreateWithoutWorkoutInput, logWorkoutUncheckedCreateWithoutWorkoutInput> | logWorkoutCreateWithoutWorkoutInput[] | logWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: logWorkoutCreateOrConnectWithoutWorkoutInput | logWorkoutCreateOrConnectWithoutWorkoutInput[]
    createMany?: logWorkoutCreateManyWorkoutInputEnvelope
    connect?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
  }

  export type ExerciseUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<ExerciseCreateWithoutWorkoutInput, ExerciseUncheckedCreateWithoutWorkoutInput> | ExerciseCreateWithoutWorkoutInput[] | ExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutWorkoutInput | ExerciseCreateOrConnectWithoutWorkoutInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type logWorkoutUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<logWorkoutCreateWithoutWorkoutInput, logWorkoutUncheckedCreateWithoutWorkoutInput> | logWorkoutCreateWithoutWorkoutInput[] | logWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: logWorkoutCreateOrConnectWithoutWorkoutInput | logWorkoutCreateOrConnectWithoutWorkoutInput[]
    createMany?: logWorkoutCreateManyWorkoutInputEnvelope
    connect?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
  }

  export type ExerciseUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<ExerciseCreateWithoutWorkoutInput, ExerciseUncheckedCreateWithoutWorkoutInput> | ExerciseCreateWithoutWorkoutInput[] | ExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutWorkoutInput | ExerciseCreateOrConnectWithoutWorkoutInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutWorkoutInput | ExerciseUpsertWithWhereUniqueWithoutWorkoutInput[]
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutWorkoutInput | ExerciseUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutWorkoutInput | ExerciseUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type logWorkoutUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<logWorkoutCreateWithoutWorkoutInput, logWorkoutUncheckedCreateWithoutWorkoutInput> | logWorkoutCreateWithoutWorkoutInput[] | logWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: logWorkoutCreateOrConnectWithoutWorkoutInput | logWorkoutCreateOrConnectWithoutWorkoutInput[]
    upsert?: logWorkoutUpsertWithWhereUniqueWithoutWorkoutInput | logWorkoutUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: logWorkoutCreateManyWorkoutInputEnvelope
    set?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    disconnect?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    delete?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    connect?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    update?: logWorkoutUpdateWithWhereUniqueWithoutWorkoutInput | logWorkoutUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: logWorkoutUpdateManyWithWhereWithoutWorkoutInput | logWorkoutUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: logWorkoutScalarWhereInput | logWorkoutScalarWhereInput[]
  }

  export type ExerciseUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<ExerciseCreateWithoutWorkoutInput, ExerciseUncheckedCreateWithoutWorkoutInput> | ExerciseCreateWithoutWorkoutInput[] | ExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutWorkoutInput | ExerciseCreateOrConnectWithoutWorkoutInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutWorkoutInput | ExerciseUpsertWithWhereUniqueWithoutWorkoutInput[]
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutWorkoutInput | ExerciseUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutWorkoutInput | ExerciseUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type logWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<logWorkoutCreateWithoutWorkoutInput, logWorkoutUncheckedCreateWithoutWorkoutInput> | logWorkoutCreateWithoutWorkoutInput[] | logWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: logWorkoutCreateOrConnectWithoutWorkoutInput | logWorkoutCreateOrConnectWithoutWorkoutInput[]
    upsert?: logWorkoutUpsertWithWhereUniqueWithoutWorkoutInput | logWorkoutUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: logWorkoutCreateManyWorkoutInputEnvelope
    set?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    disconnect?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    delete?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    connect?: logWorkoutWhereUniqueInput | logWorkoutWhereUniqueInput[]
    update?: logWorkoutUpdateWithWhereUniqueWithoutWorkoutInput | logWorkoutUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: logWorkoutUpdateManyWithWhereWithoutWorkoutInput | logWorkoutUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: logWorkoutScalarWhereInput | logWorkoutScalarWhereInput[]
  }

  export type WorkoutCreateNestedManyWithoutExercisesInput = {
    create?: XOR<WorkoutCreateWithoutExercisesInput, WorkoutUncheckedCreateWithoutExercisesInput> | WorkoutCreateWithoutExercisesInput[] | WorkoutUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutExercisesInput | WorkoutCreateOrConnectWithoutExercisesInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
  }

  export type logExerciseCreateNestedOneWithoutExerciseInput = {
    create?: XOR<logExerciseCreateWithoutExerciseInput, logExerciseUncheckedCreateWithoutExerciseInput>
    connectOrCreate?: logExerciseCreateOrConnectWithoutExerciseInput
    connect?: logExerciseWhereUniqueInput
  }

  export type WorkoutUncheckedCreateNestedManyWithoutExercisesInput = {
    create?: XOR<WorkoutCreateWithoutExercisesInput, WorkoutUncheckedCreateWithoutExercisesInput> | WorkoutCreateWithoutExercisesInput[] | WorkoutUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutExercisesInput | WorkoutCreateOrConnectWithoutExercisesInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
  }

  export type WorkoutUpdateManyWithoutExercisesNestedInput = {
    create?: XOR<WorkoutCreateWithoutExercisesInput, WorkoutUncheckedCreateWithoutExercisesInput> | WorkoutCreateWithoutExercisesInput[] | WorkoutUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutExercisesInput | WorkoutCreateOrConnectWithoutExercisesInput[]
    upsert?: WorkoutUpsertWithWhereUniqueWithoutExercisesInput | WorkoutUpsertWithWhereUniqueWithoutExercisesInput[]
    set?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    disconnect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    delete?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    update?: WorkoutUpdateWithWhereUniqueWithoutExercisesInput | WorkoutUpdateWithWhereUniqueWithoutExercisesInput[]
    updateMany?: WorkoutUpdateManyWithWhereWithoutExercisesInput | WorkoutUpdateManyWithWhereWithoutExercisesInput[]
    deleteMany?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
  }

  export type logExerciseUpdateOneWithoutExerciseNestedInput = {
    create?: XOR<logExerciseCreateWithoutExerciseInput, logExerciseUncheckedCreateWithoutExerciseInput>
    connectOrCreate?: logExerciseCreateOrConnectWithoutExerciseInput
    upsert?: logExerciseUpsertWithoutExerciseInput
    disconnect?: logExerciseWhereInput | boolean
    delete?: logExerciseWhereInput | boolean
    connect?: logExerciseWhereUniqueInput
    update?: XOR<XOR<logExerciseUpdateToOneWithWhereWithoutExerciseInput, logExerciseUpdateWithoutExerciseInput>, logExerciseUncheckedUpdateWithoutExerciseInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WorkoutUncheckedUpdateManyWithoutExercisesNestedInput = {
    create?: XOR<WorkoutCreateWithoutExercisesInput, WorkoutUncheckedCreateWithoutExercisesInput> | WorkoutCreateWithoutExercisesInput[] | WorkoutUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutExercisesInput | WorkoutCreateOrConnectWithoutExercisesInput[]
    upsert?: WorkoutUpsertWithWhereUniqueWithoutExercisesInput | WorkoutUpsertWithWhereUniqueWithoutExercisesInput[]
    set?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    disconnect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    delete?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    update?: WorkoutUpdateWithWhereUniqueWithoutExercisesInput | WorkoutUpdateWithWhereUniqueWithoutExercisesInput[]
    updateMany?: WorkoutUpdateManyWithWhereWithoutExercisesInput | WorkoutUpdateManyWithWhereWithoutExercisesInput[]
    deleteMany?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
  }

  export type ExerciseTimeCreateNestedManyWithoutLogExerciseInput = {
    create?: XOR<ExerciseTimeCreateWithoutLogExerciseInput, ExerciseTimeUncheckedCreateWithoutLogExerciseInput> | ExerciseTimeCreateWithoutLogExerciseInput[] | ExerciseTimeUncheckedCreateWithoutLogExerciseInput[]
    connectOrCreate?: ExerciseTimeCreateOrConnectWithoutLogExerciseInput | ExerciseTimeCreateOrConnectWithoutLogExerciseInput[]
    createMany?: ExerciseTimeCreateManyLogExerciseInputEnvelope
    connect?: ExerciseTimeWhereUniqueInput | ExerciseTimeWhereUniqueInput[]
  }

  export type ExerciseCreateNestedManyWithoutLogExerciseInput = {
    create?: XOR<ExerciseCreateWithoutLogExerciseInput, ExerciseUncheckedCreateWithoutLogExerciseInput> | ExerciseCreateWithoutLogExerciseInput[] | ExerciseUncheckedCreateWithoutLogExerciseInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutLogExerciseInput | ExerciseCreateOrConnectWithoutLogExerciseInput[]
    createMany?: ExerciseCreateManyLogExerciseInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutLogExerciseInput = {
    create?: XOR<UserCreateWithoutLogExerciseInput, UserUncheckedCreateWithoutLogExerciseInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogExerciseInput
    connect?: UserWhereUniqueInput
  }

  export type logWorkoutCreateNestedOneWithoutLogExercisesInput = {
    create?: XOR<logWorkoutCreateWithoutLogExercisesInput, logWorkoutUncheckedCreateWithoutLogExercisesInput>
    connectOrCreate?: logWorkoutCreateOrConnectWithoutLogExercisesInput
    connect?: logWorkoutWhereUniqueInput
  }

  export type ExerciseTimeUncheckedCreateNestedManyWithoutLogExerciseInput = {
    create?: XOR<ExerciseTimeCreateWithoutLogExerciseInput, ExerciseTimeUncheckedCreateWithoutLogExerciseInput> | ExerciseTimeCreateWithoutLogExerciseInput[] | ExerciseTimeUncheckedCreateWithoutLogExerciseInput[]
    connectOrCreate?: ExerciseTimeCreateOrConnectWithoutLogExerciseInput | ExerciseTimeCreateOrConnectWithoutLogExerciseInput[]
    createMany?: ExerciseTimeCreateManyLogExerciseInputEnvelope
    connect?: ExerciseTimeWhereUniqueInput | ExerciseTimeWhereUniqueInput[]
  }

  export type ExerciseUncheckedCreateNestedManyWithoutLogExerciseInput = {
    create?: XOR<ExerciseCreateWithoutLogExerciseInput, ExerciseUncheckedCreateWithoutLogExerciseInput> | ExerciseCreateWithoutLogExerciseInput[] | ExerciseUncheckedCreateWithoutLogExerciseInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutLogExerciseInput | ExerciseCreateOrConnectWithoutLogExerciseInput[]
    createMany?: ExerciseCreateManyLogExerciseInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ExerciseTimeUpdateManyWithoutLogExerciseNestedInput = {
    create?: XOR<ExerciseTimeCreateWithoutLogExerciseInput, ExerciseTimeUncheckedCreateWithoutLogExerciseInput> | ExerciseTimeCreateWithoutLogExerciseInput[] | ExerciseTimeUncheckedCreateWithoutLogExerciseInput[]
    connectOrCreate?: ExerciseTimeCreateOrConnectWithoutLogExerciseInput | ExerciseTimeCreateOrConnectWithoutLogExerciseInput[]
    upsert?: ExerciseTimeUpsertWithWhereUniqueWithoutLogExerciseInput | ExerciseTimeUpsertWithWhereUniqueWithoutLogExerciseInput[]
    createMany?: ExerciseTimeCreateManyLogExerciseInputEnvelope
    set?: ExerciseTimeWhereUniqueInput | ExerciseTimeWhereUniqueInput[]
    disconnect?: ExerciseTimeWhereUniqueInput | ExerciseTimeWhereUniqueInput[]
    delete?: ExerciseTimeWhereUniqueInput | ExerciseTimeWhereUniqueInput[]
    connect?: ExerciseTimeWhereUniqueInput | ExerciseTimeWhereUniqueInput[]
    update?: ExerciseTimeUpdateWithWhereUniqueWithoutLogExerciseInput | ExerciseTimeUpdateWithWhereUniqueWithoutLogExerciseInput[]
    updateMany?: ExerciseTimeUpdateManyWithWhereWithoutLogExerciseInput | ExerciseTimeUpdateManyWithWhereWithoutLogExerciseInput[]
    deleteMany?: ExerciseTimeScalarWhereInput | ExerciseTimeScalarWhereInput[]
  }

  export type ExerciseUpdateManyWithoutLogExerciseNestedInput = {
    create?: XOR<ExerciseCreateWithoutLogExerciseInput, ExerciseUncheckedCreateWithoutLogExerciseInput> | ExerciseCreateWithoutLogExerciseInput[] | ExerciseUncheckedCreateWithoutLogExerciseInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutLogExerciseInput | ExerciseCreateOrConnectWithoutLogExerciseInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutLogExerciseInput | ExerciseUpsertWithWhereUniqueWithoutLogExerciseInput[]
    createMany?: ExerciseCreateManyLogExerciseInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutLogExerciseInput | ExerciseUpdateWithWhereUniqueWithoutLogExerciseInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutLogExerciseInput | ExerciseUpdateManyWithWhereWithoutLogExerciseInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type UserUpdateOneWithoutLogExerciseNestedInput = {
    create?: XOR<UserCreateWithoutLogExerciseInput, UserUncheckedCreateWithoutLogExerciseInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogExerciseInput
    upsert?: UserUpsertWithoutLogExerciseInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLogExerciseInput, UserUpdateWithoutLogExerciseInput>, UserUncheckedUpdateWithoutLogExerciseInput>
  }

  export type logWorkoutUpdateOneWithoutLogExercisesNestedInput = {
    create?: XOR<logWorkoutCreateWithoutLogExercisesInput, logWorkoutUncheckedCreateWithoutLogExercisesInput>
    connectOrCreate?: logWorkoutCreateOrConnectWithoutLogExercisesInput
    upsert?: logWorkoutUpsertWithoutLogExercisesInput
    disconnect?: logWorkoutWhereInput | boolean
    delete?: logWorkoutWhereInput | boolean
    connect?: logWorkoutWhereUniqueInput
    update?: XOR<XOR<logWorkoutUpdateToOneWithWhereWithoutLogExercisesInput, logWorkoutUpdateWithoutLogExercisesInput>, logWorkoutUncheckedUpdateWithoutLogExercisesInput>
  }

  export type ExerciseTimeUncheckedUpdateManyWithoutLogExerciseNestedInput = {
    create?: XOR<ExerciseTimeCreateWithoutLogExerciseInput, ExerciseTimeUncheckedCreateWithoutLogExerciseInput> | ExerciseTimeCreateWithoutLogExerciseInput[] | ExerciseTimeUncheckedCreateWithoutLogExerciseInput[]
    connectOrCreate?: ExerciseTimeCreateOrConnectWithoutLogExerciseInput | ExerciseTimeCreateOrConnectWithoutLogExerciseInput[]
    upsert?: ExerciseTimeUpsertWithWhereUniqueWithoutLogExerciseInput | ExerciseTimeUpsertWithWhereUniqueWithoutLogExerciseInput[]
    createMany?: ExerciseTimeCreateManyLogExerciseInputEnvelope
    set?: ExerciseTimeWhereUniqueInput | ExerciseTimeWhereUniqueInput[]
    disconnect?: ExerciseTimeWhereUniqueInput | ExerciseTimeWhereUniqueInput[]
    delete?: ExerciseTimeWhereUniqueInput | ExerciseTimeWhereUniqueInput[]
    connect?: ExerciseTimeWhereUniqueInput | ExerciseTimeWhereUniqueInput[]
    update?: ExerciseTimeUpdateWithWhereUniqueWithoutLogExerciseInput | ExerciseTimeUpdateWithWhereUniqueWithoutLogExerciseInput[]
    updateMany?: ExerciseTimeUpdateManyWithWhereWithoutLogExerciseInput | ExerciseTimeUpdateManyWithWhereWithoutLogExerciseInput[]
    deleteMany?: ExerciseTimeScalarWhereInput | ExerciseTimeScalarWhereInput[]
  }

  export type ExerciseUncheckedUpdateManyWithoutLogExerciseNestedInput = {
    create?: XOR<ExerciseCreateWithoutLogExerciseInput, ExerciseUncheckedCreateWithoutLogExerciseInput> | ExerciseCreateWithoutLogExerciseInput[] | ExerciseUncheckedCreateWithoutLogExerciseInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutLogExerciseInput | ExerciseCreateOrConnectWithoutLogExerciseInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutLogExerciseInput | ExerciseUpsertWithWhereUniqueWithoutLogExerciseInput[]
    createMany?: ExerciseCreateManyLogExerciseInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutLogExerciseInput | ExerciseUpdateWithWhereUniqueWithoutLogExerciseInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutLogExerciseInput | ExerciseUpdateManyWithWhereWithoutLogExerciseInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type logExerciseCreateNestedManyWithoutLogWorkoutInput = {
    create?: XOR<logExerciseCreateWithoutLogWorkoutInput, logExerciseUncheckedCreateWithoutLogWorkoutInput> | logExerciseCreateWithoutLogWorkoutInput[] | logExerciseUncheckedCreateWithoutLogWorkoutInput[]
    connectOrCreate?: logExerciseCreateOrConnectWithoutLogWorkoutInput | logExerciseCreateOrConnectWithoutLogWorkoutInput[]
    createMany?: logExerciseCreateManyLogWorkoutInputEnvelope
    connect?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutLogWorkoutInput = {
    create?: XOR<UserCreateWithoutLogWorkoutInput, UserUncheckedCreateWithoutLogWorkoutInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogWorkoutInput
    connect?: UserWhereUniqueInput
  }

  export type WorkoutCreateNestedOneWithoutLogWorkoutInput = {
    create?: XOR<WorkoutCreateWithoutLogWorkoutInput, WorkoutUncheckedCreateWithoutLogWorkoutInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutLogWorkoutInput
    connect?: WorkoutWhereUniqueInput
  }

  export type logExerciseUncheckedCreateNestedManyWithoutLogWorkoutInput = {
    create?: XOR<logExerciseCreateWithoutLogWorkoutInput, logExerciseUncheckedCreateWithoutLogWorkoutInput> | logExerciseCreateWithoutLogWorkoutInput[] | logExerciseUncheckedCreateWithoutLogWorkoutInput[]
    connectOrCreate?: logExerciseCreateOrConnectWithoutLogWorkoutInput | logExerciseCreateOrConnectWithoutLogWorkoutInput[]
    createMany?: logExerciseCreateManyLogWorkoutInputEnvelope
    connect?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
  }

  export type logExerciseUpdateManyWithoutLogWorkoutNestedInput = {
    create?: XOR<logExerciseCreateWithoutLogWorkoutInput, logExerciseUncheckedCreateWithoutLogWorkoutInput> | logExerciseCreateWithoutLogWorkoutInput[] | logExerciseUncheckedCreateWithoutLogWorkoutInput[]
    connectOrCreate?: logExerciseCreateOrConnectWithoutLogWorkoutInput | logExerciseCreateOrConnectWithoutLogWorkoutInput[]
    upsert?: logExerciseUpsertWithWhereUniqueWithoutLogWorkoutInput | logExerciseUpsertWithWhereUniqueWithoutLogWorkoutInput[]
    createMany?: logExerciseCreateManyLogWorkoutInputEnvelope
    set?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    disconnect?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    delete?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    connect?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    update?: logExerciseUpdateWithWhereUniqueWithoutLogWorkoutInput | logExerciseUpdateWithWhereUniqueWithoutLogWorkoutInput[]
    updateMany?: logExerciseUpdateManyWithWhereWithoutLogWorkoutInput | logExerciseUpdateManyWithWhereWithoutLogWorkoutInput[]
    deleteMany?: logExerciseScalarWhereInput | logExerciseScalarWhereInput[]
  }

  export type UserUpdateOneWithoutLogWorkoutNestedInput = {
    create?: XOR<UserCreateWithoutLogWorkoutInput, UserUncheckedCreateWithoutLogWorkoutInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogWorkoutInput
    upsert?: UserUpsertWithoutLogWorkoutInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLogWorkoutInput, UserUpdateWithoutLogWorkoutInput>, UserUncheckedUpdateWithoutLogWorkoutInput>
  }

  export type WorkoutUpdateOneWithoutLogWorkoutNestedInput = {
    create?: XOR<WorkoutCreateWithoutLogWorkoutInput, WorkoutUncheckedCreateWithoutLogWorkoutInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutLogWorkoutInput
    upsert?: WorkoutUpsertWithoutLogWorkoutInput
    disconnect?: WorkoutWhereInput | boolean
    delete?: WorkoutWhereInput | boolean
    connect?: WorkoutWhereUniqueInput
    update?: XOR<XOR<WorkoutUpdateToOneWithWhereWithoutLogWorkoutInput, WorkoutUpdateWithoutLogWorkoutInput>, WorkoutUncheckedUpdateWithoutLogWorkoutInput>
  }

  export type logExerciseUncheckedUpdateManyWithoutLogWorkoutNestedInput = {
    create?: XOR<logExerciseCreateWithoutLogWorkoutInput, logExerciseUncheckedCreateWithoutLogWorkoutInput> | logExerciseCreateWithoutLogWorkoutInput[] | logExerciseUncheckedCreateWithoutLogWorkoutInput[]
    connectOrCreate?: logExerciseCreateOrConnectWithoutLogWorkoutInput | logExerciseCreateOrConnectWithoutLogWorkoutInput[]
    upsert?: logExerciseUpsertWithWhereUniqueWithoutLogWorkoutInput | logExerciseUpsertWithWhereUniqueWithoutLogWorkoutInput[]
    createMany?: logExerciseCreateManyLogWorkoutInputEnvelope
    set?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    disconnect?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    delete?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    connect?: logExerciseWhereUniqueInput | logExerciseWhereUniqueInput[]
    update?: logExerciseUpdateWithWhereUniqueWithoutLogWorkoutInput | logExerciseUpdateWithWhereUniqueWithoutLogWorkoutInput[]
    updateMany?: logExerciseUpdateManyWithWhereWithoutLogWorkoutInput | logExerciseUpdateManyWithWhereWithoutLogWorkoutInput[]
    deleteMany?: logExerciseScalarWhereInput | logExerciseScalarWhereInput[]
  }

  export type logExerciseCreateNestedOneWithoutTimesInput = {
    create?: XOR<logExerciseCreateWithoutTimesInput, logExerciseUncheckedCreateWithoutTimesInput>
    connectOrCreate?: logExerciseCreateOrConnectWithoutTimesInput
    connect?: logExerciseWhereUniqueInput
  }

  export type logExerciseUpdateOneWithoutTimesNestedInput = {
    create?: XOR<logExerciseCreateWithoutTimesInput, logExerciseUncheckedCreateWithoutTimesInput>
    connectOrCreate?: logExerciseCreateOrConnectWithoutTimesInput
    upsert?: logExerciseUpsertWithoutTimesInput
    disconnect?: logExerciseWhereInput | boolean
    delete?: logExerciseWhereInput | boolean
    connect?: logExerciseWhereUniqueInput
    update?: XOR<XOR<logExerciseUpdateToOneWithWhereWithoutTimesInput, logExerciseUpdateWithoutTimesInput>, logExerciseUncheckedUpdateWithoutTimesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type logExerciseCreateWithoutUserInput = {
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    times?: ExerciseTimeCreateNestedManyWithoutLogExerciseInput
    exercise?: ExerciseCreateNestedManyWithoutLogExerciseInput
    logWorkout?: logWorkoutCreateNestedOneWithoutLogExercisesInput
  }

  export type logExerciseUncheckedCreateWithoutUserInput = {
    id?: number
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    logWorkoutId?: number | null
    times?: ExerciseTimeUncheckedCreateNestedManyWithoutLogExerciseInput
    exercise?: ExerciseUncheckedCreateNestedManyWithoutLogExerciseInput
  }

  export type logExerciseCreateOrConnectWithoutUserInput = {
    where: logExerciseWhereUniqueInput
    create: XOR<logExerciseCreateWithoutUserInput, logExerciseUncheckedCreateWithoutUserInput>
  }

  export type logExerciseCreateManyUserInputEnvelope = {
    data: logExerciseCreateManyUserInput | logExerciseCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type logWorkoutCreateWithoutUserInput = {
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    logExercises?: logExerciseCreateNestedManyWithoutLogWorkoutInput
    workout?: WorkoutCreateNestedOneWithoutLogWorkoutInput
  }

  export type logWorkoutUncheckedCreateWithoutUserInput = {
    id?: number
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    workoutId?: number | null
    logExercises?: logExerciseUncheckedCreateNestedManyWithoutLogWorkoutInput
  }

  export type logWorkoutCreateOrConnectWithoutUserInput = {
    where: logWorkoutWhereUniqueInput
    create: XOR<logWorkoutCreateWithoutUserInput, logWorkoutUncheckedCreateWithoutUserInput>
  }

  export type logWorkoutCreateManyUserInputEnvelope = {
    data: logWorkoutCreateManyUserInput | logWorkoutCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type logExerciseUpsertWithWhereUniqueWithoutUserInput = {
    where: logExerciseWhereUniqueInput
    update: XOR<logExerciseUpdateWithoutUserInput, logExerciseUncheckedUpdateWithoutUserInput>
    create: XOR<logExerciseCreateWithoutUserInput, logExerciseUncheckedCreateWithoutUserInput>
  }

  export type logExerciseUpdateWithWhereUniqueWithoutUserInput = {
    where: logExerciseWhereUniqueInput
    data: XOR<logExerciseUpdateWithoutUserInput, logExerciseUncheckedUpdateWithoutUserInput>
  }

  export type logExerciseUpdateManyWithWhereWithoutUserInput = {
    where: logExerciseScalarWhereInput
    data: XOR<logExerciseUpdateManyMutationInput, logExerciseUncheckedUpdateManyWithoutUserInput>
  }

  export type logExerciseScalarWhereInput = {
    AND?: logExerciseScalarWhereInput | logExerciseScalarWhereInput[]
    OR?: logExerciseScalarWhereInput[]
    NOT?: logExerciseScalarWhereInput | logExerciseScalarWhereInput[]
    id?: IntFilter<"logExercise"> | number
    isCompleted?: BoolFilter<"logExercise"> | boolean
    createdAt?: DateTimeFilter<"logExercise"> | Date | string
    updatedt?: DateTimeFilter<"logExercise"> | Date | string
    userId?: IntNullableFilter<"logExercise"> | number | null
    logWorkoutId?: IntNullableFilter<"logExercise"> | number | null
  }

  export type logWorkoutUpsertWithWhereUniqueWithoutUserInput = {
    where: logWorkoutWhereUniqueInput
    update: XOR<logWorkoutUpdateWithoutUserInput, logWorkoutUncheckedUpdateWithoutUserInput>
    create: XOR<logWorkoutCreateWithoutUserInput, logWorkoutUncheckedCreateWithoutUserInput>
  }

  export type logWorkoutUpdateWithWhereUniqueWithoutUserInput = {
    where: logWorkoutWhereUniqueInput
    data: XOR<logWorkoutUpdateWithoutUserInput, logWorkoutUncheckedUpdateWithoutUserInput>
  }

  export type logWorkoutUpdateManyWithWhereWithoutUserInput = {
    where: logWorkoutScalarWhereInput
    data: XOR<logWorkoutUpdateManyMutationInput, logWorkoutUncheckedUpdateManyWithoutUserInput>
  }

  export type logWorkoutScalarWhereInput = {
    AND?: logWorkoutScalarWhereInput | logWorkoutScalarWhereInput[]
    OR?: logWorkoutScalarWhereInput[]
    NOT?: logWorkoutScalarWhereInput | logWorkoutScalarWhereInput[]
    id?: IntFilter<"logWorkout"> | number
    isCompleted?: BoolFilter<"logWorkout"> | boolean
    createdAt?: DateTimeFilter<"logWorkout"> | Date | string
    updatedt?: DateTimeFilter<"logWorkout"> | Date | string
    userId?: IntNullableFilter<"logWorkout"> | number | null
    workoutId?: IntNullableFilter<"logWorkout"> | number | null
  }

  export type ExerciseCreateWithoutWorkoutInput = {
    createdAt?: Date | string
    updatedt?: Date | string
    name: string
    times: number
    iconPath: string
    logExercise?: logExerciseCreateNestedOneWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateWithoutWorkoutInput = {
    id?: number
    createdAt?: Date | string
    updatedt?: Date | string
    name: string
    times: number
    iconPath: string
    logExerciseId?: number | null
  }

  export type ExerciseCreateOrConnectWithoutWorkoutInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutWorkoutInput, ExerciseUncheckedCreateWithoutWorkoutInput>
  }

  export type logWorkoutCreateWithoutWorkoutInput = {
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    logExercises?: logExerciseCreateNestedManyWithoutLogWorkoutInput
    user?: UserCreateNestedOneWithoutLogWorkoutInput
  }

  export type logWorkoutUncheckedCreateWithoutWorkoutInput = {
    id?: number
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    userId?: number | null
    logExercises?: logExerciseUncheckedCreateNestedManyWithoutLogWorkoutInput
  }

  export type logWorkoutCreateOrConnectWithoutWorkoutInput = {
    where: logWorkoutWhereUniqueInput
    create: XOR<logWorkoutCreateWithoutWorkoutInput, logWorkoutUncheckedCreateWithoutWorkoutInput>
  }

  export type logWorkoutCreateManyWorkoutInputEnvelope = {
    data: logWorkoutCreateManyWorkoutInput | logWorkoutCreateManyWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutWorkoutInput, ExerciseUncheckedUpdateWithoutWorkoutInput>
    create: XOR<ExerciseCreateWithoutWorkoutInput, ExerciseUncheckedCreateWithoutWorkoutInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutWorkoutInput, ExerciseUncheckedUpdateWithoutWorkoutInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutWorkoutInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type ExerciseScalarWhereInput = {
    AND?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
    OR?: ExerciseScalarWhereInput[]
    NOT?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
    id?: IntFilter<"Exercise"> | number
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedt?: DateTimeFilter<"Exercise"> | Date | string
    name?: StringFilter<"Exercise"> | string
    times?: IntFilter<"Exercise"> | number
    iconPath?: StringFilter<"Exercise"> | string
    logExerciseId?: IntNullableFilter<"Exercise"> | number | null
  }

  export type logWorkoutUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: logWorkoutWhereUniqueInput
    update: XOR<logWorkoutUpdateWithoutWorkoutInput, logWorkoutUncheckedUpdateWithoutWorkoutInput>
    create: XOR<logWorkoutCreateWithoutWorkoutInput, logWorkoutUncheckedCreateWithoutWorkoutInput>
  }

  export type logWorkoutUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: logWorkoutWhereUniqueInput
    data: XOR<logWorkoutUpdateWithoutWorkoutInput, logWorkoutUncheckedUpdateWithoutWorkoutInput>
  }

  export type logWorkoutUpdateManyWithWhereWithoutWorkoutInput = {
    where: logWorkoutScalarWhereInput
    data: XOR<logWorkoutUpdateManyMutationInput, logWorkoutUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type WorkoutCreateWithoutExercisesInput = {
    name: string
    createdAt?: Date | string
    updatedt?: Date | string
    logWorkout?: logWorkoutCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateWithoutExercisesInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedt?: Date | string
    logWorkout?: logWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutExercisesInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutExercisesInput, WorkoutUncheckedCreateWithoutExercisesInput>
  }

  export type logExerciseCreateWithoutExerciseInput = {
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    times?: ExerciseTimeCreateNestedManyWithoutLogExerciseInput
    user?: UserCreateNestedOneWithoutLogExerciseInput
    logWorkout?: logWorkoutCreateNestedOneWithoutLogExercisesInput
  }

  export type logExerciseUncheckedCreateWithoutExerciseInput = {
    id?: number
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    userId?: number | null
    logWorkoutId?: number | null
    times?: ExerciseTimeUncheckedCreateNestedManyWithoutLogExerciseInput
  }

  export type logExerciseCreateOrConnectWithoutExerciseInput = {
    where: logExerciseWhereUniqueInput
    create: XOR<logExerciseCreateWithoutExerciseInput, logExerciseUncheckedCreateWithoutExerciseInput>
  }

  export type WorkoutUpsertWithWhereUniqueWithoutExercisesInput = {
    where: WorkoutWhereUniqueInput
    update: XOR<WorkoutUpdateWithoutExercisesInput, WorkoutUncheckedUpdateWithoutExercisesInput>
    create: XOR<WorkoutCreateWithoutExercisesInput, WorkoutUncheckedCreateWithoutExercisesInput>
  }

  export type WorkoutUpdateWithWhereUniqueWithoutExercisesInput = {
    where: WorkoutWhereUniqueInput
    data: XOR<WorkoutUpdateWithoutExercisesInput, WorkoutUncheckedUpdateWithoutExercisesInput>
  }

  export type WorkoutUpdateManyWithWhereWithoutExercisesInput = {
    where: WorkoutScalarWhereInput
    data: XOR<WorkoutUpdateManyMutationInput, WorkoutUncheckedUpdateManyWithoutExercisesInput>
  }

  export type WorkoutScalarWhereInput = {
    AND?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
    OR?: WorkoutScalarWhereInput[]
    NOT?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
    id?: IntFilter<"Workout"> | number
    name?: StringFilter<"Workout"> | string
    createdAt?: DateTimeFilter<"Workout"> | Date | string
    updatedt?: DateTimeFilter<"Workout"> | Date | string
  }

  export type logExerciseUpsertWithoutExerciseInput = {
    update: XOR<logExerciseUpdateWithoutExerciseInput, logExerciseUncheckedUpdateWithoutExerciseInput>
    create: XOR<logExerciseCreateWithoutExerciseInput, logExerciseUncheckedCreateWithoutExerciseInput>
    where?: logExerciseWhereInput
  }

  export type logExerciseUpdateToOneWithWhereWithoutExerciseInput = {
    where?: logExerciseWhereInput
    data: XOR<logExerciseUpdateWithoutExerciseInput, logExerciseUncheckedUpdateWithoutExerciseInput>
  }

  export type logExerciseUpdateWithoutExerciseInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    times?: ExerciseTimeUpdateManyWithoutLogExerciseNestedInput
    user?: UserUpdateOneWithoutLogExerciseNestedInput
    logWorkout?: logWorkoutUpdateOneWithoutLogExercisesNestedInput
  }

  export type logExerciseUncheckedUpdateWithoutExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    logWorkoutId?: NullableIntFieldUpdateOperationsInput | number | null
    times?: ExerciseTimeUncheckedUpdateManyWithoutLogExerciseNestedInput
  }

  export type ExerciseTimeCreateWithoutLogExerciseInput = {
    createdAt?: Date | string
    updatedt?: Date | string
    isCompleted?: boolean
    repeat?: number
    weight?: number
  }

  export type ExerciseTimeUncheckedCreateWithoutLogExerciseInput = {
    id?: number
    createdAt?: Date | string
    updatedt?: Date | string
    isCompleted?: boolean
    repeat?: number
    weight?: number
  }

  export type ExerciseTimeCreateOrConnectWithoutLogExerciseInput = {
    where: ExerciseTimeWhereUniqueInput
    create: XOR<ExerciseTimeCreateWithoutLogExerciseInput, ExerciseTimeUncheckedCreateWithoutLogExerciseInput>
  }

  export type ExerciseTimeCreateManyLogExerciseInputEnvelope = {
    data: ExerciseTimeCreateManyLogExerciseInput | ExerciseTimeCreateManyLogExerciseInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseCreateWithoutLogExerciseInput = {
    createdAt?: Date | string
    updatedt?: Date | string
    name: string
    times: number
    iconPath: string
    workout?: WorkoutCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateWithoutLogExerciseInput = {
    id?: number
    createdAt?: Date | string
    updatedt?: Date | string
    name: string
    times: number
    iconPath: string
    workout?: WorkoutUncheckedCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseCreateOrConnectWithoutLogExerciseInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutLogExerciseInput, ExerciseUncheckedCreateWithoutLogExerciseInput>
  }

  export type ExerciseCreateManyLogExerciseInputEnvelope = {
    data: ExerciseCreateManyLogExerciseInput | ExerciseCreateManyLogExerciseInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutLogExerciseInput = {
    email: string
    createdAt?: Date | string
    updatedt?: Date | string
    name: string
    password: string
    image?: UserCreateimageInput | string[]
    logWorkout?: logWorkoutCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLogExerciseInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedt?: Date | string
    name: string
    password: string
    image?: UserCreateimageInput | string[]
    logWorkout?: logWorkoutUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLogExerciseInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLogExerciseInput, UserUncheckedCreateWithoutLogExerciseInput>
  }

  export type logWorkoutCreateWithoutLogExercisesInput = {
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    user?: UserCreateNestedOneWithoutLogWorkoutInput
    workout?: WorkoutCreateNestedOneWithoutLogWorkoutInput
  }

  export type logWorkoutUncheckedCreateWithoutLogExercisesInput = {
    id?: number
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    userId?: number | null
    workoutId?: number | null
  }

  export type logWorkoutCreateOrConnectWithoutLogExercisesInput = {
    where: logWorkoutWhereUniqueInput
    create: XOR<logWorkoutCreateWithoutLogExercisesInput, logWorkoutUncheckedCreateWithoutLogExercisesInput>
  }

  export type ExerciseTimeUpsertWithWhereUniqueWithoutLogExerciseInput = {
    where: ExerciseTimeWhereUniqueInput
    update: XOR<ExerciseTimeUpdateWithoutLogExerciseInput, ExerciseTimeUncheckedUpdateWithoutLogExerciseInput>
    create: XOR<ExerciseTimeCreateWithoutLogExerciseInput, ExerciseTimeUncheckedCreateWithoutLogExerciseInput>
  }

  export type ExerciseTimeUpdateWithWhereUniqueWithoutLogExerciseInput = {
    where: ExerciseTimeWhereUniqueInput
    data: XOR<ExerciseTimeUpdateWithoutLogExerciseInput, ExerciseTimeUncheckedUpdateWithoutLogExerciseInput>
  }

  export type ExerciseTimeUpdateManyWithWhereWithoutLogExerciseInput = {
    where: ExerciseTimeScalarWhereInput
    data: XOR<ExerciseTimeUpdateManyMutationInput, ExerciseTimeUncheckedUpdateManyWithoutLogExerciseInput>
  }

  export type ExerciseTimeScalarWhereInput = {
    AND?: ExerciseTimeScalarWhereInput | ExerciseTimeScalarWhereInput[]
    OR?: ExerciseTimeScalarWhereInput[]
    NOT?: ExerciseTimeScalarWhereInput | ExerciseTimeScalarWhereInput[]
    id?: IntFilter<"ExerciseTime"> | number
    createdAt?: DateTimeFilter<"ExerciseTime"> | Date | string
    updatedt?: DateTimeFilter<"ExerciseTime"> | Date | string
    isCompleted?: BoolFilter<"ExerciseTime"> | boolean
    repeat?: IntFilter<"ExerciseTime"> | number
    weight?: IntFilter<"ExerciseTime"> | number
    logExerciseId?: IntNullableFilter<"ExerciseTime"> | number | null
  }

  export type ExerciseUpsertWithWhereUniqueWithoutLogExerciseInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutLogExerciseInput, ExerciseUncheckedUpdateWithoutLogExerciseInput>
    create: XOR<ExerciseCreateWithoutLogExerciseInput, ExerciseUncheckedCreateWithoutLogExerciseInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutLogExerciseInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutLogExerciseInput, ExerciseUncheckedUpdateWithoutLogExerciseInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutLogExerciseInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutLogExerciseInput>
  }

  export type UserUpsertWithoutLogExerciseInput = {
    update: XOR<UserUpdateWithoutLogExerciseInput, UserUncheckedUpdateWithoutLogExerciseInput>
    create: XOR<UserCreateWithoutLogExerciseInput, UserUncheckedCreateWithoutLogExerciseInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLogExerciseInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLogExerciseInput, UserUncheckedUpdateWithoutLogExerciseInput>
  }

  export type UserUpdateWithoutLogExerciseInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: UserUpdateimageInput | string[]
    logWorkout?: logWorkoutUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLogExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: UserUpdateimageInput | string[]
    logWorkout?: logWorkoutUncheckedUpdateManyWithoutUserNestedInput
  }

  export type logWorkoutUpsertWithoutLogExercisesInput = {
    update: XOR<logWorkoutUpdateWithoutLogExercisesInput, logWorkoutUncheckedUpdateWithoutLogExercisesInput>
    create: XOR<logWorkoutCreateWithoutLogExercisesInput, logWorkoutUncheckedCreateWithoutLogExercisesInput>
    where?: logWorkoutWhereInput
  }

  export type logWorkoutUpdateToOneWithWhereWithoutLogExercisesInput = {
    where?: logWorkoutWhereInput
    data: XOR<logWorkoutUpdateWithoutLogExercisesInput, logWorkoutUncheckedUpdateWithoutLogExercisesInput>
  }

  export type logWorkoutUpdateWithoutLogExercisesInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLogWorkoutNestedInput
    workout?: WorkoutUpdateOneWithoutLogWorkoutNestedInput
  }

  export type logWorkoutUncheckedUpdateWithoutLogExercisesInput = {
    id?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    workoutId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type logExerciseCreateWithoutLogWorkoutInput = {
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    times?: ExerciseTimeCreateNestedManyWithoutLogExerciseInput
    exercise?: ExerciseCreateNestedManyWithoutLogExerciseInput
    user?: UserCreateNestedOneWithoutLogExerciseInput
  }

  export type logExerciseUncheckedCreateWithoutLogWorkoutInput = {
    id?: number
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    userId?: number | null
    times?: ExerciseTimeUncheckedCreateNestedManyWithoutLogExerciseInput
    exercise?: ExerciseUncheckedCreateNestedManyWithoutLogExerciseInput
  }

  export type logExerciseCreateOrConnectWithoutLogWorkoutInput = {
    where: logExerciseWhereUniqueInput
    create: XOR<logExerciseCreateWithoutLogWorkoutInput, logExerciseUncheckedCreateWithoutLogWorkoutInput>
  }

  export type logExerciseCreateManyLogWorkoutInputEnvelope = {
    data: logExerciseCreateManyLogWorkoutInput | logExerciseCreateManyLogWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutLogWorkoutInput = {
    email: string
    createdAt?: Date | string
    updatedt?: Date | string
    name: string
    password: string
    image?: UserCreateimageInput | string[]
    logExercise?: logExerciseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLogWorkoutInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedt?: Date | string
    name: string
    password: string
    image?: UserCreateimageInput | string[]
    logExercise?: logExerciseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLogWorkoutInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLogWorkoutInput, UserUncheckedCreateWithoutLogWorkoutInput>
  }

  export type WorkoutCreateWithoutLogWorkoutInput = {
    name: string
    createdAt?: Date | string
    updatedt?: Date | string
    exercises?: ExerciseCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateWithoutLogWorkoutInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedt?: Date | string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutLogWorkoutInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutLogWorkoutInput, WorkoutUncheckedCreateWithoutLogWorkoutInput>
  }

  export type logExerciseUpsertWithWhereUniqueWithoutLogWorkoutInput = {
    where: logExerciseWhereUniqueInput
    update: XOR<logExerciseUpdateWithoutLogWorkoutInput, logExerciseUncheckedUpdateWithoutLogWorkoutInput>
    create: XOR<logExerciseCreateWithoutLogWorkoutInput, logExerciseUncheckedCreateWithoutLogWorkoutInput>
  }

  export type logExerciseUpdateWithWhereUniqueWithoutLogWorkoutInput = {
    where: logExerciseWhereUniqueInput
    data: XOR<logExerciseUpdateWithoutLogWorkoutInput, logExerciseUncheckedUpdateWithoutLogWorkoutInput>
  }

  export type logExerciseUpdateManyWithWhereWithoutLogWorkoutInput = {
    where: logExerciseScalarWhereInput
    data: XOR<logExerciseUpdateManyMutationInput, logExerciseUncheckedUpdateManyWithoutLogWorkoutInput>
  }

  export type UserUpsertWithoutLogWorkoutInput = {
    update: XOR<UserUpdateWithoutLogWorkoutInput, UserUncheckedUpdateWithoutLogWorkoutInput>
    create: XOR<UserCreateWithoutLogWorkoutInput, UserUncheckedCreateWithoutLogWorkoutInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLogWorkoutInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLogWorkoutInput, UserUncheckedUpdateWithoutLogWorkoutInput>
  }

  export type UserUpdateWithoutLogWorkoutInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: UserUpdateimageInput | string[]
    logExercise?: logExerciseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLogWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: UserUpdateimageInput | string[]
    logExercise?: logExerciseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkoutUpsertWithoutLogWorkoutInput = {
    update: XOR<WorkoutUpdateWithoutLogWorkoutInput, WorkoutUncheckedUpdateWithoutLogWorkoutInput>
    create: XOR<WorkoutCreateWithoutLogWorkoutInput, WorkoutUncheckedCreateWithoutLogWorkoutInput>
    where?: WorkoutWhereInput
  }

  export type WorkoutUpdateToOneWithWhereWithoutLogWorkoutInput = {
    where?: WorkoutWhereInput
    data: XOR<WorkoutUpdateWithoutLogWorkoutInput, WorkoutUncheckedUpdateWithoutLogWorkoutInput>
  }

  export type WorkoutUpdateWithoutLogWorkoutInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutLogWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: ExerciseUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type logExerciseCreateWithoutTimesInput = {
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    exercise?: ExerciseCreateNestedManyWithoutLogExerciseInput
    user?: UserCreateNestedOneWithoutLogExerciseInput
    logWorkout?: logWorkoutCreateNestedOneWithoutLogExercisesInput
  }

  export type logExerciseUncheckedCreateWithoutTimesInput = {
    id?: number
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    userId?: number | null
    logWorkoutId?: number | null
    exercise?: ExerciseUncheckedCreateNestedManyWithoutLogExerciseInput
  }

  export type logExerciseCreateOrConnectWithoutTimesInput = {
    where: logExerciseWhereUniqueInput
    create: XOR<logExerciseCreateWithoutTimesInput, logExerciseUncheckedCreateWithoutTimesInput>
  }

  export type logExerciseUpsertWithoutTimesInput = {
    update: XOR<logExerciseUpdateWithoutTimesInput, logExerciseUncheckedUpdateWithoutTimesInput>
    create: XOR<logExerciseCreateWithoutTimesInput, logExerciseUncheckedCreateWithoutTimesInput>
    where?: logExerciseWhereInput
  }

  export type logExerciseUpdateToOneWithWhereWithoutTimesInput = {
    where?: logExerciseWhereInput
    data: XOR<logExerciseUpdateWithoutTimesInput, logExerciseUncheckedUpdateWithoutTimesInput>
  }

  export type logExerciseUpdateWithoutTimesInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercise?: ExerciseUpdateManyWithoutLogExerciseNestedInput
    user?: UserUpdateOneWithoutLogExerciseNestedInput
    logWorkout?: logWorkoutUpdateOneWithoutLogExercisesNestedInput
  }

  export type logExerciseUncheckedUpdateWithoutTimesInput = {
    id?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    logWorkoutId?: NullableIntFieldUpdateOperationsInput | number | null
    exercise?: ExerciseUncheckedUpdateManyWithoutLogExerciseNestedInput
  }

  export type logExerciseCreateManyUserInput = {
    id?: number
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    logWorkoutId?: number | null
  }

  export type logWorkoutCreateManyUserInput = {
    id?: number
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    workoutId?: number | null
  }

  export type logExerciseUpdateWithoutUserInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    times?: ExerciseTimeUpdateManyWithoutLogExerciseNestedInput
    exercise?: ExerciseUpdateManyWithoutLogExerciseNestedInput
    logWorkout?: logWorkoutUpdateOneWithoutLogExercisesNestedInput
  }

  export type logExerciseUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    logWorkoutId?: NullableIntFieldUpdateOperationsInput | number | null
    times?: ExerciseTimeUncheckedUpdateManyWithoutLogExerciseNestedInput
    exercise?: ExerciseUncheckedUpdateManyWithoutLogExerciseNestedInput
  }

  export type logExerciseUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    logWorkoutId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type logWorkoutUpdateWithoutUserInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    logExercises?: logExerciseUpdateManyWithoutLogWorkoutNestedInput
    workout?: WorkoutUpdateOneWithoutLogWorkoutNestedInput
  }

  export type logWorkoutUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutId?: NullableIntFieldUpdateOperationsInput | number | null
    logExercises?: logExerciseUncheckedUpdateManyWithoutLogWorkoutNestedInput
  }

  export type logWorkoutUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type logWorkoutCreateManyWorkoutInput = {
    id?: number
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    userId?: number | null
  }

  export type ExerciseUpdateWithoutWorkoutInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    times?: IntFieldUpdateOperationsInput | number
    iconPath?: StringFieldUpdateOperationsInput | string
    logExercise?: logExerciseUpdateOneWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    times?: IntFieldUpdateOperationsInput | number
    iconPath?: StringFieldUpdateOperationsInput | string
    logExerciseId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExerciseUncheckedUpdateManyWithoutWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    times?: IntFieldUpdateOperationsInput | number
    iconPath?: StringFieldUpdateOperationsInput | string
    logExerciseId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type logWorkoutUpdateWithoutWorkoutInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    logExercises?: logExerciseUpdateManyWithoutLogWorkoutNestedInput
    user?: UserUpdateOneWithoutLogWorkoutNestedInput
  }

  export type logWorkoutUncheckedUpdateWithoutWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    logExercises?: logExerciseUncheckedUpdateManyWithoutLogWorkoutNestedInput
  }

  export type logWorkoutUncheckedUpdateManyWithoutWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WorkoutUpdateWithoutExercisesInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    logWorkout?: logWorkoutUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutExercisesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    logWorkout?: logWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateManyWithoutExercisesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseTimeCreateManyLogExerciseInput = {
    id?: number
    createdAt?: Date | string
    updatedt?: Date | string
    isCompleted?: boolean
    repeat?: number
    weight?: number
  }

  export type ExerciseCreateManyLogExerciseInput = {
    id?: number
    createdAt?: Date | string
    updatedt?: Date | string
    name: string
    times: number
    iconPath: string
  }

  export type ExerciseTimeUpdateWithoutLogExerciseInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    repeat?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
  }

  export type ExerciseTimeUncheckedUpdateWithoutLogExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    repeat?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
  }

  export type ExerciseTimeUncheckedUpdateManyWithoutLogExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    repeat?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
  }

  export type ExerciseUpdateWithoutLogExerciseInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    times?: IntFieldUpdateOperationsInput | number
    iconPath?: StringFieldUpdateOperationsInput | string
    workout?: WorkoutUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutLogExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    times?: IntFieldUpdateOperationsInput | number
    iconPath?: StringFieldUpdateOperationsInput | string
    workout?: WorkoutUncheckedUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateManyWithoutLogExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    times?: IntFieldUpdateOperationsInput | number
    iconPath?: StringFieldUpdateOperationsInput | string
  }

  export type logExerciseCreateManyLogWorkoutInput = {
    id?: number
    isCompleted?: boolean
    createdAt?: Date | string
    updatedt?: Date | string
    userId?: number | null
  }

  export type logExerciseUpdateWithoutLogWorkoutInput = {
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    times?: ExerciseTimeUpdateManyWithoutLogExerciseNestedInput
    exercise?: ExerciseUpdateManyWithoutLogExerciseNestedInput
    user?: UserUpdateOneWithoutLogExerciseNestedInput
  }

  export type logExerciseUncheckedUpdateWithoutLogWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    times?: ExerciseTimeUncheckedUpdateManyWithoutLogExerciseNestedInput
    exercise?: ExerciseUncheckedUpdateManyWithoutLogExerciseNestedInput
  }

  export type logExerciseUncheckedUpdateManyWithoutLogWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutCountOutputTypeDefaultArgs instead
     */
    export type WorkoutCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseCountOutputTypeDefaultArgs instead
     */
    export type ExerciseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExerciseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LogExerciseCountOutputTypeDefaultArgs instead
     */
    export type LogExerciseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LogExerciseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LogWorkoutCountOutputTypeDefaultArgs instead
     */
    export type LogWorkoutCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LogWorkoutCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutDefaultArgs instead
     */
    export type WorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseDefaultArgs instead
     */
    export type ExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExerciseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use logExerciseDefaultArgs instead
     */
    export type logExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = logExerciseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use logWorkoutDefaultArgs instead
     */
    export type logWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = logWorkoutDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseTimeDefaultArgs instead
     */
    export type ExerciseTimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExerciseTimeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}