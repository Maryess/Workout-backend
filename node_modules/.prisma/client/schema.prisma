generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  name        String
  password    String
  image       String[]
  logExercise logExercise[]
  logWorkout  logWorkout[]
}

model Workout {
  id         Int          @id @default(autoincrement())
  name       String
  exercises  Exercise[]
  logWorkout logWorkout[]
}

model Exercise {
  id    Int    @id @default(autoincrement())
  name  String
  times Int

  iconPath String    @map("icon_path")
  workout  Workout[]

  logExercise   logExercise? @relation(fields: [logExerciseId], references: [id])
  logExerciseId Int?
}

model logExercise {
  id          Int            @id @default(autoincrement())
  isCompleted Boolean        @default(false)
  times       ExerciseTime[]
  exercise    Exercise[]

  user         User?       @relation(fields: [userId], references: [id])
  userId       Int?
  logWorkout   logWorkout? @relation(fields: [logWorkoutId], references: [id])
  logWorkoutId Int?
}

model logWorkout {
  id         Int     @id @default(autoincrement())
  isComleted Boolean @default(false)

  logExercises logExercise[]

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  workout   Workout? @relation(fields: [workoutId], references: [id])
  workoutId Int?
}

model ExerciseTime {
  id Int @id @default(autoincrement())

  isCompleted Boolean @default(false)
  repeat      Int
  weight      Int

  logExercise   logExercise? @relation(fields: [logExerciseId], references: [id])
  logExerciseId Int?         @map("log_exercise_id")
}
